{
  "definitions": {
    "CreateResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/CreateModelResponseProperties"
        },
        {
          "$ref": "#/definitions/ResponseProperties"
        },
        {
          "properties": {
            "conversation": {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "description": "The unique ID of the conversation.\n",
                      "title": "Conversation ID",
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/ConversationParam"
                    }
                  ],
                  "description": "The conversation that this response belongs to. Items from this conversation are prepended to `input_items` for this response request.\nInput items and output items from this response are automatically added to this conversation after this response completes.\n"
                },
                {
                  "type": "null"
                }
              ]
            },
            "include": {
              "anyOf": [
                {
                  "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `web_search_call.action.sources`: Include the sources of the web search tool call.\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program).\n",
                  "items": {
                    "$ref": "#/definitions/Includable"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ]
            },
            "input": {
              "anyOf": [
                {
                  "description": "A text input to the model, equivalent to a text input with the\n`user` role.\n",
                  "title": "Text input",
                  "type": "string"
                },
                {
                  "description": "A list of one or many input items to the model, containing\ndifferent content types.\n",
                  "items": {
                    "$ref": "#/definitions/InputItem"
                  },
                  "title": "Input item list",
                  "type": "array"
                }
              ],
              "description": "Text, image, or file inputs to the model, used to generate a response.\n\nLearn more:\n- [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n- [Image inputs](https://platform.openai.com/docs/guides/images)\n- [File inputs](https://platform.openai.com/docs/guides/pdf-files)\n- [Conversation state](https://platform.openai.com/docs/guides/conversation-state)\n- [Function calling](https://platform.openai.com/docs/guides/function-calling)\n"
            },
            "instructions": {
              "anyOf": [
                {
                  "description": "A system (or developer) message inserted into the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses.\n",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "parallel_tool_calls": {
              "anyOf": [
                {
                  "default": true,
                  "description": "Whether to allow the model to run tool calls in parallel.\n",
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "store": {
              "anyOf": [
                {
                  "default": true,
                  "description": "Whether to store the generated model response for later retrieval via\nAPI.\n",
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "stream": {
              "anyOf": [
                {
                  "default": false,
                  "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\nfor more information.\n",
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "stream_options": {
              "$ref": "#/definitions/ResponseStreamOptions"
            }
          },
          "type": "object"
        }
      ]
    },
    "Response": {
      "allOf": [
        {
          "$ref": "#/definitions/ModelResponseProperties"
        },
        {
          "$ref": "#/definitions/ResponseProperties"
        },
        {
          "properties": {
            "conversation": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Conversation-2"
                },
                {
                  "type": "null"
                }
              ]
            },
            "created_at": {
              "description": "Unix timestamp (in seconds) of when this Response was created.\n",
              "type": "number"
            },
            "error": {
              "$ref": "#/definitions/ResponseError"
            },
            "id": {
              "description": "Unique identifier for this Response.\n",
              "type": "string"
            },
            "incomplete_details": {
              "anyOf": [
                {
                  "description": "Details about why the response is incomplete.\n",
                  "properties": {
                    "reason": {
                      "description": "The reason why the response is incomplete.",
                      "enum": [
                        "max_output_tokens",
                        "content_filter"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            },
            "instructions": {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "description": "A text input to the model, equivalent to a text input with the\n`developer` role.\n",
                      "type": "string"
                    },
                    {
                      "description": "A list of one or many input items to the model, containing\ndifferent content types.\n",
                      "items": {
                        "$ref": "#/definitions/InputItem"
                      },
                      "title": "Input item list",
                      "type": "array"
                    }
                  ],
                  "description": "A system (or developer) message inserted into the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses.\n"
                },
                {
                  "type": "null"
                }
              ]
            },
            "object": {
              "description": "The object type of this resource - always set to `response`.\n",
              "enum": [
                "response"
              ],
              "type": "string",
              "x-stainless-const": true
            },
            "output": {
              "description": "An array of content items generated by the model.\n\n- The length and order of items in the `output` array is dependent\n  on the model's response.\n- Rather than accessing the first item in the `output` array and\n  assuming it's an `assistant` message with the content generated by\n  the model, you might consider using the `output_text` property where\n  supported in SDKs.\n",
              "items": {
                "$ref": "#/definitions/OutputItem"
              },
              "type": "array"
            },
            "output_text": {
              "anyOf": [
                {
                  "description": "SDK-only convenience property that contains the aggregated text output\nfrom all `output_text` items in the `output` array, if any are present.\nSupported in the Python and JavaScript SDKs.\n",
                  "type": "string",
                  "x-oaiSupportedSDKs": [
                    "python",
                    "javascript"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "x-stainless-skip": true
            },
            "parallel_tool_calls": {
              "default": true,
              "description": "Whether to allow the model to run tool calls in parallel.\n",
              "type": "boolean"
            },
            "status": {
              "description": "The status of the response generation. One of `completed`, `failed`,\n`in_progress`, `cancelled`, `queued`, or `incomplete`.\n",
              "enum": [
                "completed",
                "failed",
                "in_progress",
                "cancelled",
                "queued",
                "incomplete"
              ],
              "type": "string"
            },
            "usage": {
              "$ref": "#/definitions/ResponseUsage"
            }
          },
          "required": [
            "id",
            "object",
            "created_at",
            "error",
            "incomplete_details",
            "instructions",
            "model",
            "tools",
            "output",
            "parallel_tool_calls",
            "metadata",
            "tool_choice",
            "temperature",
            "top_p"
          ],
          "type": "object"
        }
      ],
      "title": "The response object"
    },
    "ResponseStreamEvent": {
      "anyOf": [
        {
          "$ref": "#/definitions/ResponseAudioDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseAudioDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseAudioTranscriptDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseAudioTranscriptDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseCodeInterpreterCallCodeDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseCodeInterpreterCallCodeDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseCodeInterpreterCallCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseCodeInterpreterCallInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseCodeInterpreterCallInterpretingEvent"
        },
        {
          "$ref": "#/definitions/ResponseCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseContentPartAddedEvent"
        },
        {
          "$ref": "#/definitions/ResponseContentPartDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseCreatedEvent"
        },
        {
          "$ref": "#/definitions/ResponseErrorEvent"
        },
        {
          "$ref": "#/definitions/ResponseFileSearchCallCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseFileSearchCallInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseFileSearchCallSearchingEvent"
        },
        {
          "$ref": "#/definitions/ResponseFunctionCallArgumentsDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseFunctionCallArgumentsDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseFailedEvent"
        },
        {
          "$ref": "#/definitions/ResponseIncompleteEvent"
        },
        {
          "$ref": "#/definitions/ResponseOutputItemAddedEvent"
        },
        {
          "$ref": "#/definitions/ResponseOutputItemDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseReasoningSummaryPartAddedEvent"
        },
        {
          "$ref": "#/definitions/ResponseReasoningSummaryPartDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseReasoningSummaryTextDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseReasoningSummaryTextDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseReasoningTextDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseReasoningTextDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseRefusalDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseRefusalDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseTextDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseTextDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseWebSearchCallCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseWebSearchCallInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseWebSearchCallSearchingEvent"
        },
        {
          "$ref": "#/definitions/ResponseImageGenCallCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseImageGenCallGeneratingEvent"
        },
        {
          "$ref": "#/definitions/ResponseImageGenCallInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseImageGenCallPartialImageEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPCallArgumentsDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPCallArgumentsDoneEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPCallCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPCallFailedEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPCallInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPListToolsCompletedEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPListToolsFailedEvent"
        },
        {
          "$ref": "#/definitions/ResponseMCPListToolsInProgressEvent"
        },
        {
          "$ref": "#/definitions/ResponseOutputTextAnnotationAddedEvent"
        },
        {
          "$ref": "#/definitions/ResponseQueuedEvent"
        },
        {
          "$ref": "#/definitions/ResponseCustomToolCallInputDeltaEvent"
        },
        {
          "$ref": "#/definitions/ResponseCustomToolCallInputDoneEvent"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "CreateModelResponseProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/ModelResponseProperties"
        },
        {
          "properties": {
            "top_logprobs": {
              "description": "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n",
              "maximum": 20,
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "ResponseProperties": {
      "properties": {
        "background": {
          "anyOf": [
            {
              "default": false,
              "description": "Whether to run the model response in the background.\n[Learn more](https://platform.openai.com/docs/guides/background).\n",
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_output_tokens": {
          "anyOf": [
            {
              "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).\n",
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_tool_calls": {
          "anyOf": [
            {
              "description": "The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored.\n",
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "model": {
          "$ref": "#/definitions/ModelIdsResponses",
          "description": "Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI\noffers a wide range of models with different capabilities, performance\ncharacteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)\nto browse and compare available models.\n"
        },
        "previous_response_id": {
          "anyOf": [
            {
              "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about\n[conversation state](https://platform.openai.com/docs/guides/conversation-state). Cannot be used in conjunction with `conversation`.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "prompt": {
          "$ref": "#/definitions/Prompt"
        },
        "reasoning": {
          "anyOf": [
            {
              "$ref": "#/definitions/Reasoning"
            },
            {
              "type": "null"
            }
          ]
        },
        "text": {
          "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n- [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n",
          "properties": {
            "format": {
              "$ref": "#/definitions/TextResponseFormatConfiguration"
            },
            "verbosity": {
              "$ref": "#/definitions/Verbosity"
            }
          },
          "type": "object"
        },
        "tool_choice": {
          "anyOf": [
            {
              "$ref": "#/definitions/ToolChoiceOptions"
            },
            {
              "$ref": "#/definitions/ToolChoiceAllowed"
            },
            {
              "$ref": "#/definitions/ToolChoiceTypes"
            },
            {
              "$ref": "#/definitions/ToolChoiceFunction"
            },
            {
              "$ref": "#/definitions/ToolChoiceMCP"
            },
            {
              "$ref": "#/definitions/ToolChoiceCustom"
            }
          ],
          "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call.\n",
          "discriminator": {
            "propertyName": "type"
          }
        },
        "tools": {
          "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\nWe support the following categories of tools:\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)\n  or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about\n  [built-in tools](https://platform.openai.com/docs/guides/tools).\n- **MCP Tools**: Integrations with third-party systems via custom MCP servers\n  or predefined connectors such as Google Drive and SharePoint. Learn more about\n  [MCP Tools](https://platform.openai.com/docs/guides/tools-connectors-mcp).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code with strongly typed arguments\n  and outputs. Learn more about\n  [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use\n  custom tools to call your own code.\n",
          "items": {
            "$ref": "#/definitions/Tool"
          },
          "type": "array"
        },
        "truncation": {
          "anyOf": [
            {
              "default": "disabled",
              "description": "The truncation strategy to use for the model response.\n- `auto`: If the input to this Response exceeds\n  the model's context window size, the model will truncate the\n  response to fit the context window by dropping items from the beginning of the conversation.\n- `disabled` (default): If the input size will exceed the context window\n  size for a model, the request will fail with a 400 error.\n",
              "enum": [
                "auto",
                "disabled"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "type": "object"
    },
    "ConversationParam": {
      "description": "The conversation that this response belongs to.",
      "properties": {
        "id": {
          "description": "The unique ID of the conversation.",
          "example": "conv_123",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "Conversation object",
      "type": "object"
    },
    "Includable": {
      "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `web_search_call.action.sources`: Include the sources of the web search tool call.\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program).\n",
      "enum": [
        "code_interpreter_call.outputs",
        "computer_call_output.output.image_url",
        "file_search_call.results",
        "message.input_image.image_url",
        "message.output_text.logprobs",
        "reasoning.encrypted_content"
      ],
      "type": "string"
    },
    "InputItem": {
      "anyOf": [
        {
          "$ref": "#/definitions/EasyInputMessage"
        },
        {
          "$ref": "#/definitions/Item",
          "description": "An item representing part of the context for the response to be\ngenerated by the model. Can contain text, images, and audio inputs,\nas well as previous assistant responses and tool call outputs.\n",
          "title": "Item",
          "type": "object"
        },
        {
          "$ref": "#/definitions/ItemReferenceParam"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "ResponseStreamOptions": {
      "anyOf": [
        {
          "description": "Options for streaming responses. Only set this when you set `stream: true`.\n",
          "properties": {
            "include_obfuscation": {
              "description": "When true, stream obfuscation will be enabled. Stream obfuscation adds\nrandom characters to an `obfuscation` field on streaming delta events to\nnormalize payload sizes as a mitigation to certain side-channel attacks.\nThese obfuscation fields are included by default, but add a small amount\nof overhead to the data stream. You can set `include_obfuscation` to\nfalse to optimize for bandwidth if you trust the network links between\nyour application and the OpenAI API.\n",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        {
          "type": "null"
        }
      ]
    },
    "ModelResponseProperties": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "prompt_cache_key": {
          "description": "Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the `user` field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching).\n",
          "example": "prompt-cache-key-1234",
          "type": "string"
        },
        "safety_identifier": {
          "description": "A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.\nThe IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n",
          "example": "safety-identifier-1234",
          "type": "string"
        },
        "service_tier": {
          "$ref": "#/definitions/ServiceTier"
        },
        "temperature": {
          "anyOf": [
            {
              "default": 1,
              "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n",
              "example": 1,
              "maximum": 2,
              "minimum": 0,
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "top_logprobs": {
          "anyOf": [
            {
              "description": "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n",
              "maximum": 20,
              "minimum": 0,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "top_p": {
          "anyOf": [
            {
              "default": 1,
              "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
              "example": 1,
              "maximum": 1,
              "minimum": 0,
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "user": {
          "deprecated": true,
          "description": "This field is being replaced by `safety_identifier` and `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching optimizations.\nA stable identifier for your end-users.\nUsed to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n",
          "example": "user-1234",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Conversation-2": {
      "description": "The conversation that this response belongs to. Input items and output items from this response are automatically added to this conversation.",
      "properties": {
        "id": {
          "description": "The unique ID of the conversation.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "Conversation",
      "type": "object"
    },
    "ResponseError": {
      "anyOf": [
        {
          "description": "An error object returned when the model fails to generate a Response.\n",
          "properties": {
            "code": {
              "$ref": "#/definitions/ResponseErrorCode"
            },
            "message": {
              "description": "A human-readable description of the error.\n",
              "type": "string"
            }
          },
          "required": [
            "code",
            "message"
          ],
          "type": "object"
        },
        {
          "type": "null"
        }
      ]
    },
    "OutputItem": {
      "anyOf": [
        {
          "$ref": "#/definitions/OutputMessage"
        },
        {
          "$ref": "#/definitions/FileSearchToolCall"
        },
        {
          "$ref": "#/definitions/FunctionToolCall"
        },
        {
          "$ref": "#/definitions/WebSearchToolCall"
        },
        {
          "$ref": "#/definitions/ComputerToolCall"
        },
        {
          "$ref": "#/definitions/ReasoningItem"
        },
        {
          "$ref": "#/definitions/ImageGenToolCall"
        },
        {
          "$ref": "#/definitions/CodeInterpreterToolCall"
        },
        {
          "$ref": "#/definitions/LocalShellToolCall"
        },
        {
          "$ref": "#/definitions/MCPToolCall"
        },
        {
          "$ref": "#/definitions/MCPListTools"
        },
        {
          "$ref": "#/definitions/MCPApprovalRequest"
        },
        {
          "$ref": "#/definitions/CustomToolCall"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "ResponseUsage": {
      "description": "Represents token usage details including input tokens, output tokens,\na breakdown of output tokens, and the total tokens used.\n",
      "properties": {
        "input_tokens": {
          "description": "The number of input tokens.",
          "type": "integer"
        },
        "input_tokens_details": {
          "description": "A detailed breakdown of the input tokens.",
          "properties": {
            "cached_tokens": {
              "description": "The number of tokens that were retrieved from the cache. \n[More on prompt caching](https://platform.openai.com/docs/guides/prompt-caching).\n",
              "type": "integer"
            }
          },
          "required": [
            "cached_tokens"
          ],
          "type": "object"
        },
        "output_tokens": {
          "description": "The number of output tokens.",
          "type": "integer"
        },
        "output_tokens_details": {
          "description": "A detailed breakdown of the output tokens.",
          "properties": {
            "reasoning_tokens": {
              "description": "The number of reasoning tokens.",
              "type": "integer"
            }
          },
          "required": [
            "reasoning_tokens"
          ],
          "type": "object"
        },
        "total_tokens": {
          "description": "The total number of tokens used.",
          "type": "integer"
        }
      },
      "required": [
        "input_tokens",
        "input_tokens_details",
        "output_tokens",
        "output_tokens_details",
        "total_tokens"
      ],
      "type": "object"
    },
    "ResponseAudioDeltaEvent": {
      "description": "Emitted when there is a partial audio response.",
      "properties": {
        "delta": {
          "description": "A chunk of Base64 encoded response audio bytes.\n",
          "type": "string"
        },
        "sequence_number": {
          "description": "A sequence number for this chunk of the stream response.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.audio.delta`.\n",
          "enum": [
            "response.audio.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.audio.delta\",\n  \"response_id\": \"resp_123\",\n  \"delta\": \"base64encoded...\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.audio.delta"
      }
    },
    "ResponseAudioDoneEvent": {
      "description": "Emitted when the audio response is complete.",
      "properties": {
        "sequence_number": {
          "description": "The sequence number of the delta.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.audio.done`.\n",
          "enum": [
            "response.audio.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "sequence_number",
        "response_id"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.audio.done\",\n  \"response_id\": \"resp-123\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.audio.done"
      }
    },
    "ResponseAudioTranscriptDeltaEvent": {
      "description": "Emitted when there is a partial transcript of audio.",
      "properties": {
        "delta": {
          "description": "The partial transcript of the audio response.\n",
          "type": "string"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.audio.transcript.delta`.\n",
          "enum": [
            "response.audio.transcript.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response_id",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.audio.transcript.delta\",\n  \"response_id\": \"resp_123\",\n  \"delta\": \" ... partial transcript ... \",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.audio.transcript.delta"
      }
    },
    "ResponseAudioTranscriptDoneEvent": {
      "description": "Emitted when the full audio transcript is completed.",
      "properties": {
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.audio.transcript.done`.\n",
          "enum": [
            "response.audio.transcript.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.audio.transcript.done\",\n  \"response_id\": \"resp_123\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.audio.transcript.done"
      }
    },
    "ResponseCodeInterpreterCallCodeDeltaEvent": {
      "description": "Emitted when a partial code snippet is streamed by the code interpreter.",
      "properties": {
        "delta": {
          "description": "The partial code snippet being streamed by the code interpreter.",
          "type": "string"
        },
        "item_id": {
          "description": "The unique identifier of the code interpreter tool call item.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response for which the code is being streamed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event, used to order streaming events.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.code_interpreter_call_code.delta`.",
          "enum": [
            "response.code_interpreter_call_code.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.code_interpreter_call_code.delta\",\n  \"output_index\": 0,\n  \"item_id\": \"ci_12345\",\n  \"delta\": \"print('Hello, world')\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.code_interpreter_call_code.delta"
      }
    },
    "ResponseCodeInterpreterCallCodeDoneEvent": {
      "description": "Emitted when the code snippet is finalized by the code interpreter.",
      "properties": {
        "code": {
          "description": "The final code snippet output by the code interpreter.",
          "type": "string"
        },
        "item_id": {
          "description": "The unique identifier of the code interpreter tool call item.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response for which the code is finalized.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event, used to order streaming events.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.code_interpreter_call_code.done`.",
          "enum": [
            "response.code_interpreter_call_code.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "code",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.code_interpreter_call_code.done\",\n  \"output_index\": 3,\n  \"item_id\": \"ci_12345\",\n  \"code\": \"print('done')\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.code_interpreter_call_code.done"
      }
    },
    "ResponseCodeInterpreterCallCompletedEvent": {
      "description": "Emitted when the code interpreter call is completed.",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the code interpreter tool call item.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response for which the code interpreter call is completed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event, used to order streaming events.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.code_interpreter_call.completed`.",
          "enum": [
            "response.code_interpreter_call.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.code_interpreter_call.completed\",\n  \"output_index\": 5,\n  \"item_id\": \"ci_12345\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.code_interpreter_call.completed"
      }
    },
    "ResponseCodeInterpreterCallInProgressEvent": {
      "description": "Emitted when a code interpreter call is in progress.",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the code interpreter tool call item.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response for which the code interpreter call is in progress.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event, used to order streaming events.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.code_interpreter_call.in_progress`.",
          "enum": [
            "response.code_interpreter_call.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.code_interpreter_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"ci_12345\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.code_interpreter_call.in_progress"
      }
    },
    "ResponseCodeInterpreterCallInterpretingEvent": {
      "description": "Emitted when the code interpreter is actively interpreting the code snippet.",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the code interpreter tool call item.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response for which the code interpreter is interpreting code.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event, used to order streaming events.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.code_interpreter_call.interpreting`.",
          "enum": [
            "response.code_interpreter_call.interpreting"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.code_interpreter_call.interpreting\",\n  \"output_index\": 4,\n  \"item_id\": \"ci_12345\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.code_interpreter_call.interpreting"
      }
    },
    "ResponseCompletedEvent": {
      "description": "Emitted when the model response is complete.",
      "properties": {
        "response": {
          "$ref": "#/definitions/Response",
          "description": "Properties of the completed response.\n"
        },
        "sequence_number": {
          "description": "The sequence number for this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.completed`.\n",
          "enum": [
            "response.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.completed\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"completed\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"input\": [],\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [\n      {\n        \"id\": \"msg_123\",\n        \"type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\": [\n          {\n            \"type\": \"output_text\",\n            \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n            \"annotations\": []\n          }\n        ]\n      }\n    ],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": {\n      \"input_tokens\": 0,\n      \"output_tokens\": 0,\n      \"output_tokens_details\": {\n        \"reasoning_tokens\": 0\n      },\n      \"total_tokens\": 0\n    },\n    \"user\": null,\n    \"metadata\": {}\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.completed"
      }
    },
    "ResponseContentPartAddedEvent": {
      "description": "Emitted when a new content part is added.",
      "properties": {
        "content_index": {
          "description": "The index of the content part that was added.\n",
          "type": "integer"
        },
        "item_id": {
          "description": "The ID of the output item that the content part was added to.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the content part was added to.\n",
          "type": "integer"
        },
        "part": {
          "$ref": "#/definitions/OutputContent",
          "description": "The content part that was added.\n"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.content_part.added`.\n",
          "enum": [
            "response.content_part.added"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "part",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.content_part.added\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"\",\n    \"annotations\": []\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.content_part.added"
      }
    },
    "ResponseContentPartDoneEvent": {
      "description": "Emitted when a content part is done.",
      "properties": {
        "content_index": {
          "description": "The index of the content part that is done.\n",
          "type": "integer"
        },
        "item_id": {
          "description": "The ID of the output item that the content part was added to.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the content part was added to.\n",
          "type": "integer"
        },
        "part": {
          "$ref": "#/definitions/OutputContent",
          "description": "The content part that is done.\n"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.content_part.done`.\n",
          "enum": [
            "response.content_part.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "part",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.content_part.done\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"sequence_number\": 1,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n    \"annotations\": []\n  }\n}\n",
        "group": "responses",
        "name": "response.content_part.done"
      }
    },
    "ResponseCreatedEvent": {
      "description": "An event that is emitted when a response is created.\n",
      "properties": {
        "response": {
          "$ref": "#/definitions/Response",
          "description": "The response that was created.\n"
        },
        "sequence_number": {
          "description": "The sequence number for this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.created`.\n",
          "enum": [
            "response.created"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.created\",\n  \"response\": {\n    \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\": true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n      \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.created"
      }
    },
    "ResponseErrorEvent": {
      "description": "Emitted when an error occurs.",
      "properties": {
        "code": {
          "anyOf": [
            {
              "description": "The error code.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "message": {
          "description": "The error message.\n",
          "type": "string"
        },
        "param": {
          "anyOf": [
            {
              "description": "The error parameter.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `error`.\n",
          "enum": [
            "error"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "code",
        "message",
        "param",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"error\",\n  \"code\": \"ERR_SOMETHING\",\n  \"message\": \"Something went wrong\",\n  \"param\": null,\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "error"
      }
    },
    "ResponseFileSearchCallCompletedEvent": {
      "description": "Emitted when a file search call is completed (results found).",
      "properties": {
        "item_id": {
          "description": "The ID of the output item that the file search call is initiated.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the file search call is initiated.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.file_search_call.completed`.\n",
          "enum": [
            "response.file_search_call.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.file_search_call.completed\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.file_search_call.completed"
      }
    },
    "ResponseFileSearchCallInProgressEvent": {
      "description": "Emitted when a file search call is initiated.",
      "properties": {
        "item_id": {
          "description": "The ID of the output item that the file search call is initiated.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the file search call is initiated.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.file_search_call.in_progress`.\n",
          "enum": [
            "response.file_search_call.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.file_search_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.file_search_call.in_progress"
      }
    },
    "ResponseFileSearchCallSearchingEvent": {
      "description": "Emitted when a file search is currently searching.",
      "properties": {
        "item_id": {
          "description": "The ID of the output item that the file search call is initiated.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the file search call is searching.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.file_search_call.searching`.\n",
          "enum": [
            "response.file_search_call.searching"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.file_search_call.searching\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.file_search_call.searching"
      }
    },
    "ResponseFunctionCallArgumentsDeltaEvent": {
      "description": "Emitted when there is a partial function-call arguments delta.",
      "properties": {
        "delta": {
          "description": "The function-call arguments delta that is added.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The ID of the output item that the function-call arguments delta is added to.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the function-call arguments delta is added to.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.function_call_arguments.delta`.\n",
          "enum": [
            "response.function_call_arguments.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.function_call_arguments.delta\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"delta\": \"{ \\\"arg\\\":\"\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.function_call_arguments.delta"
      }
    },
    "ResponseFunctionCallArgumentsDoneEvent": {
      "description": "Emitted when function-call arguments are finalized.",
      "properties": {
        "arguments": {
          "description": "The function-call arguments.",
          "type": "string"
        },
        "item_id": {
          "description": "The ID of the item.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "enum": [
            "response.function_call_arguments.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "arguments",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.function_call_arguments.done\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"arguments\": \"{ \\\"arg\\\": 123 }\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.function_call_arguments.done"
      }
    },
    "ResponseInProgressEvent": {
      "description": "Emitted when the response is in progress.",
      "properties": {
        "response": {
          "$ref": "#/definitions/Response",
          "description": "The response that is in progress.\n"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.in_progress`.\n",
          "enum": [
            "response.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.in_progress\",\n  \"response\": {\n    \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\": true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n      \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.in_progress"
      }
    },
    "ResponseFailedEvent": {
      "description": "An event that is emitted when a response fails.\n",
      "properties": {
        "response": {
          "$ref": "#/definitions/Response",
          "description": "The response that failed.\n"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.failed`.\n",
          "enum": [
            "response.failed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.failed\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"failed\",\n    \"error\": {\n      \"code\": \"server_error\",\n      \"message\": \"The model failed to generate a response.\"\n    },\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n",
        "group": "responses",
        "name": "response.failed"
      }
    },
    "ResponseIncompleteEvent": {
      "description": "An event that is emitted when a response finishes as incomplete.\n",
      "properties": {
        "response": {
          "$ref": "#/definitions/Response",
          "description": "The response that was incomplete.\n"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.incomplete`.\n",
          "enum": [
            "response.incomplete"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.incomplete\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"incomplete\",\n    \"error\": null, \n    \"incomplete_details\": {\n      \"reason\": \"max_tokens\"\n    },\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.incomplete"
      }
    },
    "ResponseOutputItemAddedEvent": {
      "description": "Emitted when a new output item is added.",
      "properties": {
        "item": {
          "$ref": "#/definitions/OutputItem",
          "description": "The output item that was added.\n"
        },
        "output_index": {
          "description": "The index of the output item that was added.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.output_item.added`.\n",
          "enum": [
            "response.output_item.added"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.output_item.added\",\n  \"output_index\": 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"in_progress\",\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\": []\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.output_item.added"
      }
    },
    "ResponseOutputItemDoneEvent": {
      "description": "Emitted when an output item is marked done.",
      "properties": {
        "item": {
          "$ref": "#/definitions/OutputItem",
          "description": "The output item that was marked done.\n"
        },
        "output_index": {
          "description": "The index of the output item that was marked done.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.output_item.done`.\n",
          "enum": [
            "response.output_item.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.output_item.done\",\n  \"output_index\": 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"completed\",\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\": [\n      {\n        \"type\": \"output_text\",\n        \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n        \"annotations\": []\n      }\n    ]\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.output_item.done"
      }
    },
    "ResponseReasoningSummaryPartAddedEvent": {
      "description": "Emitted when a new reasoning summary part is added.",
      "properties": {
        "item_id": {
          "description": "The ID of the item this summary part is associated with.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item this summary part is associated with.\n",
          "type": "integer"
        },
        "part": {
          "description": "The summary part that was added.\n",
          "properties": {
            "text": {
              "description": "The text of the summary part.",
              "type": "string"
            },
            "type": {
              "description": "The type of the summary part. Always `summary_text`.",
              "enum": [
                "summary_text"
              ],
              "type": "string",
              "x-stainless-const": true
            }
          },
          "required": [
            "type",
            "text"
          ],
          "type": "object"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "summary_index": {
          "description": "The index of the summary part within the reasoning summary.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.reasoning_summary_part.added`.\n",
          "enum": [
            "response.reasoning_summary_part.added"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "part",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.reasoning_summary_part.added\",\n  \"item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\": 0,\n  \"summary_index\": 0,\n  \"part\": {\n    \"type\": \"summary_text\",\n    \"text\": \"\"\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.reasoning_summary_part.added"
      }
    },
    "ResponseReasoningSummaryPartDoneEvent": {
      "description": "Emitted when a reasoning summary part is completed.",
      "properties": {
        "item_id": {
          "description": "The ID of the item this summary part is associated with.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item this summary part is associated with.\n",
          "type": "integer"
        },
        "part": {
          "description": "The completed summary part.\n",
          "properties": {
            "text": {
              "description": "The text of the summary part.",
              "type": "string"
            },
            "type": {
              "description": "The type of the summary part. Always `summary_text`.",
              "enum": [
                "summary_text"
              ],
              "type": "string",
              "x-stainless-const": true
            }
          },
          "required": [
            "type",
            "text"
          ],
          "type": "object"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "summary_index": {
          "description": "The index of the summary part within the reasoning summary.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.reasoning_summary_part.done`.\n",
          "enum": [
            "response.reasoning_summary_part.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "part",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.reasoning_summary_part.done\",\n  \"item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\": 0,\n  \"summary_index\": 0,\n  \"part\": {\n    \"type\": \"summary_text\",\n    \"text\": \"**Responding to a greeting**\\n\\nThe user just said, \\\"Hello!\\\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \\\"Hello! How can I assist you today?\\\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!\"\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.reasoning_summary_part.done"
      }
    },
    "ResponseReasoningSummaryTextDeltaEvent": {
      "description": "Emitted when a delta is added to a reasoning summary text.",
      "properties": {
        "delta": {
          "description": "The text delta that was added to the summary.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The ID of the item this summary text delta is associated with.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item this summary text delta is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "summary_index": {
          "description": "The index of the summary part within the reasoning summary.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.reasoning_summary_text.delta`.\n",
          "enum": [
            "response.reasoning_summary_text.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.reasoning_summary_text.delta\",\n  \"item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\": 0,\n  \"summary_index\": 0,\n  \"delta\": \"**Responding to a greeting**\\n\\nThe user just said, \\\"Hello!\\\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \\\"Hello! How can I assist you today?\\\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.reasoning_summary_text.delta"
      }
    },
    "ResponseReasoningSummaryTextDoneEvent": {
      "description": "Emitted when a reasoning summary text is completed.",
      "properties": {
        "item_id": {
          "description": "The ID of the item this summary text is associated with.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item this summary text is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "summary_index": {
          "description": "The index of the summary part within the reasoning summary.\n",
          "type": "integer"
        },
        "text": {
          "description": "The full text of the completed reasoning summary.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the event. Always `response.reasoning_summary_text.done`.\n",
          "enum": [
            "response.reasoning_summary_text.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "text",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.reasoning_summary_text.done\",\n  \"item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\": 0,\n  \"summary_index\": 0,\n  \"text\": \"**Responding to a greeting**\\n\\nThe user just said, \\\"Hello!\\\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \\\"Hello! How can I assist you today?\\\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.reasoning_summary_text.done"
      }
    },
    "ResponseReasoningTextDeltaEvent": {
      "description": "Emitted when a delta is added to a reasoning text.",
      "properties": {
        "content_index": {
          "description": "The index of the reasoning content part this delta is associated with.\n",
          "type": "integer"
        },
        "delta": {
          "description": "The text delta that was added to the reasoning content.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The ID of the item this reasoning text delta is associated with.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item this reasoning text delta is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.reasoning_text.delta`.\n",
          "enum": [
            "response.reasoning_text.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.reasoning_text.delta\",\n  \"item_id\": \"rs_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"The\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.reasoning_text.delta"
      }
    },
    "ResponseReasoningTextDoneEvent": {
      "description": "Emitted when a reasoning text is completed.",
      "properties": {
        "content_index": {
          "description": "The index of the reasoning content part.\n",
          "type": "integer"
        },
        "item_id": {
          "description": "The ID of the item this reasoning text is associated with.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item this reasoning text is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "text": {
          "description": "The full text of the completed reasoning content.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the event. Always `response.reasoning_text.done`.\n",
          "enum": [
            "response.reasoning_text.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "text",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.reasoning_text.done\",\n  \"item_id\": \"rs_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\": \"The user is asking...\",\n  \"sequence_number\": 4\n}\n",
        "group": "responses",
        "name": "response.reasoning_text.done"
      }
    },
    "ResponseRefusalDeltaEvent": {
      "description": "Emitted when there is a partial refusal text.",
      "properties": {
        "content_index": {
          "description": "The index of the content part that the refusal text is added to.\n",
          "type": "integer"
        },
        "delta": {
          "description": "The refusal text that is added.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The ID of the output item that the refusal text is added to.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the refusal text is added to.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.refusal.delta`.\n",
          "enum": [
            "response.refusal.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "delta",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.refusal.delta\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"refusal text so far\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.refusal.delta"
      }
    },
    "ResponseRefusalDoneEvent": {
      "description": "Emitted when refusal text is finalized.",
      "properties": {
        "content_index": {
          "description": "The index of the content part that the refusal text is finalized.\n",
          "type": "integer"
        },
        "item_id": {
          "description": "The ID of the output item that the refusal text is finalized.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the refusal text is finalized.\n",
          "type": "integer"
        },
        "refusal": {
          "description": "The refusal text that is finalized.\n",
          "type": "string"
        },
        "sequence_number": {
          "description": "The sequence number of this event.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.refusal.done`.\n",
          "enum": [
            "response.refusal.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "refusal",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.refusal.done\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"content_index\": 2,\n  \"refusal\": \"final refusal text\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.refusal.done"
      }
    },
    "ResponseTextDeltaEvent": {
      "description": "Emitted when there is an additional text delta.",
      "properties": {
        "content_index": {
          "description": "The index of the content part that the text delta was added to.\n",
          "type": "integer"
        },
        "delta": {
          "description": "The text delta that was added.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The ID of the output item that the text delta was added to.\n",
          "type": "string"
        },
        "logprobs": {
          "description": "The log probabilities of the tokens in the delta.\n",
          "items": {
            "$ref": "#/definitions/ResponseLogProb"
          },
          "type": "array"
        },
        "output_index": {
          "description": "The index of the output item that the text delta was added to.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number for this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.output_text.delta`.\n",
          "enum": [
            "response.output_text.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "delta",
        "sequence_number",
        "logprobs"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.output_text.delta\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"In\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.output_text.delta"
      }
    },
    "ResponseTextDoneEvent": {
      "description": "Emitted when text content is finalized.",
      "properties": {
        "content_index": {
          "description": "The index of the content part that the text content is finalized.\n",
          "type": "integer"
        },
        "item_id": {
          "description": "The ID of the output item that the text content is finalized.\n",
          "type": "string"
        },
        "logprobs": {
          "description": "The log probabilities of the tokens in the delta.\n",
          "items": {
            "$ref": "#/definitions/ResponseLogProb"
          },
          "type": "array"
        },
        "output_index": {
          "description": "The index of the output item that the text content is finalized.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number for this event.",
          "type": "integer"
        },
        "text": {
          "description": "The text content that is finalized.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the event. Always `response.output_text.done`.\n",
          "enum": [
            "response.output_text.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "text",
        "sequence_number",
        "logprobs"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.output_text.done\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.output_text.done"
      }
    },
    "ResponseWebSearchCallCompletedEvent": {
      "description": "Emitted when a web search call is completed.",
      "properties": {
        "item_id": {
          "description": "Unique ID for the output item associated with the web search call.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the web search call is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of the web search call being processed.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.web_search_call.completed`.\n",
          "enum": [
            "response.web_search_call.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.web_search_call.completed\",\n  \"output_index\": 0,\n  \"item_id\": \"ws_123\",\n  \"sequence_number\": 0\n}\n",
        "group": "responses",
        "name": "response.web_search_call.completed"
      }
    },
    "ResponseWebSearchCallInProgressEvent": {
      "description": "Emitted when a web search call is initiated.",
      "properties": {
        "item_id": {
          "description": "Unique ID for the output item associated with the web search call.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the web search call is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of the web search call being processed.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.web_search_call.in_progress`.\n",
          "enum": [
            "response.web_search_call.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.web_search_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"ws_123\",\n  \"sequence_number\": 0\n}\n",
        "group": "responses",
        "name": "response.web_search_call.in_progress"
      }
    },
    "ResponseWebSearchCallSearchingEvent": {
      "description": "Emitted when a web search call is executing.",
      "properties": {
        "item_id": {
          "description": "Unique ID for the output item associated with the web search call.\n",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that the web search call is associated with.\n",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of the web search call being processed.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always `response.web_search_call.searching`.\n",
          "enum": [
            "response.web_search_call.searching"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.web_search_call.searching\",\n  \"output_index\": 0,\n  \"item_id\": \"ws_123\",\n  \"sequence_number\": 0\n}\n",
        "group": "responses",
        "name": "response.web_search_call.searching"
      }
    },
    "ResponseImageGenCallCompletedEvent": {
      "description": "Emitted when an image generation tool call has completed and the final image is available.\n",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the image generation item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.image_generation_call.completed'.",
          "enum": [
            "response.image_generation_call.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "title": "ResponseImageGenCallCompletedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.image_generation_call.completed\",\n  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.image_generation_call.completed"
      }
    },
    "ResponseImageGenCallGeneratingEvent": {
      "description": "Emitted when an image generation tool call is actively generating an image (intermediate state).\n",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the image generation item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of the image generation item being processed.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.image_generation_call.generating'.",
          "enum": [
            "response.image_generation_call.generating"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "title": "ResponseImageGenCallGeneratingEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.image_generation_call.generating\",\n  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\": 0\n}\n",
        "group": "responses",
        "name": "response.image_generation_call.generating"
      }
    },
    "ResponseImageGenCallInProgressEvent": {
      "description": "Emitted when an image generation tool call is in progress.\n",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the image generation item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of the image generation item being processed.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.image_generation_call.in_progress'.",
          "enum": [
            "response.image_generation_call.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "title": "ResponseImageGenCallInProgressEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.image_generation_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\": 0\n}\n",
        "group": "responses",
        "name": "response.image_generation_call.in_progress"
      }
    },
    "ResponseImageGenCallPartialImageEvent": {
      "description": "Emitted when a partial image is available during image generation streaming.\n",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the image generation item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "partial_image_b64": {
          "description": "Base64-encoded partial image data, suitable for rendering as an image.",
          "type": "string"
        },
        "partial_image_index": {
          "description": "0-based index for the partial image (backend is 1-based, but this is 0-based for the user).",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of the image generation item being processed.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.image_generation_call.partial_image'.",
          "enum": [
            "response.image_generation_call.partial_image"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number",
        "partial_image_index",
        "partial_image_b64"
      ],
      "title": "ResponseImageGenCallPartialImageEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.image_generation_call.partial_image\",\n  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\": 0,\n  \"partial_image_index\": 0,\n  \"partial_image_b64\": \"...\"\n}\n",
        "group": "responses",
        "name": "response.image_generation_call.partial_image"
      }
    },
    "ResponseMCPCallArgumentsDeltaEvent": {
      "description": "Emitted when there is a delta (partial update) to the arguments of an MCP tool call.\n",
      "properties": {
        "delta": {
          "description": "A JSON string containing the partial update to the arguments for the MCP tool call.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The unique identifier of the MCP tool call item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_call_arguments.delta'.",
          "enum": [
            "response.mcp_call_arguments.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "delta",
        "sequence_number"
      ],
      "title": "ResponseMCPCallArgumentsDeltaEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_call_arguments.delta\",\n  \"output_index\": 0,\n  \"item_id\": \"item-abc\",\n  \"delta\": \"{\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.mcp_call_arguments.delta"
      }
    },
    "ResponseMCPCallArgumentsDoneEvent": {
      "description": "Emitted when the arguments for an MCP tool call are finalized.\n",
      "properties": {
        "arguments": {
          "description": "A JSON string containing the finalized arguments for the MCP tool call.\n",
          "type": "string"
        },
        "item_id": {
          "description": "The unique identifier of the MCP tool call item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_call_arguments.done'.",
          "enum": [
            "response.mcp_call_arguments.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "arguments",
        "sequence_number"
      ],
      "title": "ResponseMCPCallArgumentsDoneEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_call_arguments.done\",\n  \"output_index\": 0,\n  \"item_id\": \"item-abc\",\n  \"arguments\": \"{\\\"arg1\\\": \\\"value1\\\", \\\"arg2\\\": \\\"value2\\\"}\",\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.mcp_call_arguments.done"
      }
    },
    "ResponseMCPCallCompletedEvent": {
      "description": "Emitted when an MCP  tool call has completed successfully.\n",
      "properties": {
        "item_id": {
          "description": "The ID of the MCP tool call item that completed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that completed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_call.completed'.",
          "enum": [
            "response.mcp_call.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "title": "ResponseMCPCallCompletedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_call.completed\",\n  \"sequence_number\": 1,\n  \"item_id\": \"mcp_682d437d90a88191bf88cd03aae0c3e503937d5f622d7a90\",\n  \"output_index\": 0\n}\n",
        "group": "responses",
        "name": "response.mcp_call.completed"
      }
    },
    "ResponseMCPCallFailedEvent": {
      "description": "Emitted when an MCP  tool call has failed.\n",
      "properties": {
        "item_id": {
          "description": "The ID of the MCP tool call item that failed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that failed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_call.failed'.",
          "enum": [
            "response.mcp_call.failed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "title": "ResponseMCPCallFailedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_call.failed\",\n  \"sequence_number\": 1,\n  \"item_id\": \"mcp_682d437d90a88191bf88cd03aae0c3e503937d5f622d7a90\",\n  \"output_index\": 0\n}\n",
        "group": "responses",
        "name": "response.mcp_call.failed"
      }
    },
    "ResponseMCPCallInProgressEvent": {
      "description": "Emitted when an MCP  tool call is in progress.\n",
      "properties": {
        "item_id": {
          "description": "The unique identifier of the MCP tool call item being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_call.in_progress'.",
          "enum": [
            "response.mcp_call.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "title": "ResponseMCPCallInProgressEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_call.in_progress\",\n  \"sequence_number\": 1,\n  \"output_index\": 0,\n  \"item_id\": \"mcp_682d437d90a88191bf88cd03aae0c3e503937d5f622d7a90\"\n}\n",
        "group": "responses",
        "name": "response.mcp_call.in_progress"
      }
    },
    "ResponseMCPListToolsCompletedEvent": {
      "description": "Emitted when the list of available MCP tools has been successfully retrieved.\n",
      "properties": {
        "item_id": {
          "description": "The ID of the MCP tool call item that produced this output.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that was processed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_list_tools.completed'.",
          "enum": [
            "response.mcp_list_tools.completed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "title": "ResponseMCPListToolsCompletedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_list_tools.completed\",\n  \"sequence_number\": 1,\n  \"output_index\": 0,\n  \"item_id\": \"mcpl_682d4379df088191886b70f4ec39f90403937d5f622d7a90\"\n}\n",
        "group": "responses",
        "name": "response.mcp_list_tools.completed"
      }
    },
    "ResponseMCPListToolsFailedEvent": {
      "description": "Emitted when the attempt to list available MCP tools has failed.\n",
      "properties": {
        "item_id": {
          "description": "The ID of the MCP tool call item that failed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that failed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_list_tools.failed'.",
          "enum": [
            "response.mcp_list_tools.failed"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "title": "ResponseMCPListToolsFailedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_list_tools.failed\",\n  \"sequence_number\": 1,\n  \"output_index\": 0,\n  \"item_id\": \"mcpl_682d4379df088191886b70f4ec39f90403937d5f622d7a90\"\n}\n",
        "group": "responses",
        "name": "response.mcp_list_tools.failed"
      }
    },
    "ResponseMCPListToolsInProgressEvent": {
      "description": "Emitted when the system is in the process of retrieving the list of available MCP tools.\n",
      "properties": {
        "item_id": {
          "description": "The ID of the MCP tool call item that is being processed.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item that is being processed.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.mcp_list_tools.in_progress'.",
          "enum": [
            "response.mcp_list_tools.in_progress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "title": "ResponseMCPListToolsInProgressEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.mcp_list_tools.in_progress\",\n  \"sequence_number\": 1,\n  \"output_index\": 0,\n  \"item_id\": \"mcpl_682d4379df088191886b70f4ec39f90403937d5f622d7a90\"\n}\n",
        "group": "responses",
        "name": "response.mcp_list_tools.in_progress"
      }
    },
    "ResponseOutputTextAnnotationAddedEvent": {
      "description": "Emitted when an annotation is added to output text content.\n",
      "properties": {
        "annotation": {
          "description": "The annotation object being added. (See annotation schema for details.)",
          "type": "object"
        },
        "annotation_index": {
          "description": "The index of the annotation within the content part.",
          "type": "integer"
        },
        "content_index": {
          "description": "The index of the content part within the output item.",
          "type": "integer"
        },
        "item_id": {
          "description": "The unique identifier of the item to which the annotation is being added.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output item in the response's output array.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.output_text.annotation.added'.",
          "enum": [
            "response.output_text.annotation.added"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "annotation_index",
        "annotation",
        "sequence_number"
      ],
      "title": "ResponseOutputTextAnnotationAddedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.output_text.annotation.added\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"annotation_index\": 0,\n  \"annotation\": {\n    \"type\": \"text_annotation\",\n    \"text\": \"This is a test annotation\",\n    \"start\": 0,\n    \"end\": 10\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.output_text.annotation.added"
      }
    },
    "ResponseQueuedEvent": {
      "description": "Emitted when a response is queued and waiting to be processed.\n",
      "properties": {
        "response": {
          "$ref": "#/definitions/Response",
          "description": "The full response object that is queued."
        },
        "sequence_number": {
          "description": "The sequence number for this event.",
          "type": "integer"
        },
        "type": {
          "description": "The type of the event. Always 'response.queued'.",
          "enum": [
            "response.queued"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "title": "ResponseQueuedEvent",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.queued\",\n  \"response\": {\n    \"id\": \"res_123\",\n    \"status\": \"queued\",\n    \"created_at\": \"2021-01-01T00:00:00Z\",\n    \"updated_at\": \"2021-01-01T00:00:00Z\"\n  },\n  \"sequence_number\": 1\n}\n",
        "group": "responses",
        "name": "response.queued"
      }
    },
    "ResponseCustomToolCallInputDeltaEvent": {
      "description": "Event representing a delta (partial update) to the input of a custom tool call.\n",
      "properties": {
        "delta": {
          "description": "The incremental input data (delta) for the custom tool call.",
          "type": "string"
        },
        "item_id": {
          "description": "Unique identifier for the API item associated with this event.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output this delta applies to.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The event type identifier.",
          "enum": [
            "response.custom_tool_call_input.delta"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "delta",
        "sequence_number"
      ],
      "title": "ResponseCustomToolCallInputDelta",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.custom_tool_call_input.delta\",\n  \"output_index\": 0,\n  \"item_id\": \"ctc_1234567890abcdef\",\n  \"delta\": \"partial input text\"\n}\n",
        "group": "responses",
        "name": "response.custom_tool_call_input.delta"
      }
    },
    "ResponseCustomToolCallInputDoneEvent": {
      "description": "Event indicating that input for a custom tool call is complete.\n",
      "properties": {
        "input": {
          "description": "The complete input data for the custom tool call.",
          "type": "string"
        },
        "item_id": {
          "description": "Unique identifier for the API item associated with this event.",
          "type": "string"
        },
        "output_index": {
          "description": "The index of the output this event applies to.",
          "type": "integer"
        },
        "sequence_number": {
          "description": "The sequence number of this event.",
          "type": "integer"
        },
        "type": {
          "description": "The event type identifier.",
          "enum": [
            "response.custom_tool_call_input.done"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "input",
        "sequence_number"
      ],
      "title": "ResponseCustomToolCallInputDone",
      "type": "object",
      "x-oaiMeta": {
        "example": "{\n  \"type\": \"response.custom_tool_call_input.done\",\n  \"output_index\": 0,\n  \"item_id\": \"ctc_1234567890abcdef\",\n  \"input\": \"final complete input text\"\n}\n",
        "group": "responses",
        "name": "response.custom_tool_call_input.done"
      }
    },
    "ModelIdsResponses": {
      "anyOf": [
        {
          "$ref": "#/definitions/ModelIdsShared"
        },
        {
          "enum": [
            "o1-pro",
            "o1-pro-2025-03-19",
            "o3-pro",
            "o3-pro-2025-06-10",
            "o3-deep-research",
            "o3-deep-research-2025-06-26",
            "o4-mini-deep-research",
            "o4-mini-deep-research-2025-06-26",
            "computer-use-preview",
            "computer-use-preview-2025-03-11"
          ],
          "title": "ResponsesOnlyModel",
          "type": "string"
        }
      ],
      "example": "gpt-4o"
    },
    "Prompt": {
      "anyOf": [
        {
          "description": "Reference to a prompt template and its variables.\n[Learn more](https://platform.openai.com/docs/guides/text?api-mode=responses#reusable-prompts).\n",
          "properties": {
            "id": {
              "description": "The unique identifier of the prompt template to use.",
              "type": "string"
            },
            "variables": {
              "$ref": "#/definitions/ResponsePromptVariables"
            },
            "version": {
              "anyOf": [
                {
                  "description": "Optional version of the prompt template.",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        {
          "type": "null"
        }
      ]
    },
    "Reasoning": {
      "description": "**gpt-5 and o-series models only**\n\nConfiguration options for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n",
      "properties": {
        "effort": {
          "$ref": "#/definitions/ReasoningEffort"
        },
        "generate_summary": {
          "anyOf": [
            {
              "deprecated": true,
              "description": "**Deprecated:** use `summary` instead.\n\nA summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `auto`, `concise`, or `detailed`.\n",
              "enum": [
                "auto",
                "concise",
                "detailed"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "summary": {
          "anyOf": [
            {
              "description": "A summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `auto`, `concise`, or `detailed`.\n",
              "enum": [
                "auto",
                "concise",
                "detailed"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "title": "Reasoning",
      "type": "object"
    },
    "TextResponseFormatConfiguration": {
      "anyOf": [
        {
          "$ref": "#/definitions/ResponseFormatText"
        },
        {
          "$ref": "#/definitions/TextResponseFormatJsonSchema"
        },
        {
          "$ref": "#/definitions/ResponseFormatJsonObject"
        }
      ],
      "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
      "discriminator": {
        "propertyName": "type"
      }
    },
    "Verbosity": {
      "anyOf": [
        {
          "default": "medium",
          "description": "Constrains the verbosity of the model's response. Lower values will result in\nmore concise responses, while higher values will result in more verbose responses.\nCurrently supported values are `low`, `medium`, and `high`.\n",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "ToolChoiceOptions": {
      "description": "Controls which (if any) tool is called by the model.\n\n`none` means the model will not call any tool and instead generates a message.\n\n`auto` means the model can pick between generating a message or calling one or\nmore tools.\n\n`required` means the model must call one or more tools.\n",
      "enum": [
        "none",
        "auto",
        "required"
      ],
      "title": "Tool choice mode",
      "type": "string"
    },
    "ToolChoiceAllowed": {
      "description": "Constrains the tools available to the model to a pre-defined set.\n",
      "properties": {
        "mode": {
          "description": "Constrains the tools available to the model to a pre-defined set.\n\n`auto` allows the model to pick from among the allowed tools and generate a\nmessage.\n\n`required` requires the model to call one or more of the allowed tools.\n",
          "enum": [
            "auto",
            "required"
          ],
          "type": "string"
        },
        "tools": {
          "description": "A list of tool definitions that the model should be allowed to call.\n\nFor the Responses API, the list of tool definitions might look like:\n```json\n[\n  { \"type\": \"function\", \"name\": \"get_weather\" },\n  { \"type\": \"mcp\", \"server_label\": \"deepwiki\" },\n  { \"type\": \"image_generation\" }\n]\n```\n",
          "items": {
            "additionalProperties": true,
            "description": "A tool definition that the model should be allowed to call.\n",
            "type": "object",
            "x-oaiExpandable": false
          },
          "type": "array"
        },
        "type": {
          "description": "Allowed tool configuration type. Always `allowed_tools`.",
          "enum": [
            "allowed_tools"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "mode",
        "tools"
      ],
      "title": "Allowed tools",
      "type": "object"
    },
    "ToolChoiceTypes": {
      "description": "Indicates that the model should use a built-in tool to generate a response.\n[Learn more about built-in tools](https://platform.openai.com/docs/guides/tools).\n",
      "properties": {
        "type": {
          "description": "The type of hosted tool the model should to use. Learn more about\n[built-in tools](https://platform.openai.com/docs/guides/tools).\n\nAllowed values are:\n- `file_search`\n- `web_search_preview`\n- `computer_use_preview`\n- `code_interpreter`\n- `image_generation`\n",
          "enum": [
            "file_search",
            "web_search_preview",
            "computer_use_preview",
            "web_search_preview_2025_03_11",
            "image_generation",
            "code_interpreter"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "Hosted tool",
      "type": "object"
    },
    "ToolChoiceFunction": {
      "description": "Use this option to force the model to call a specific function.\n",
      "properties": {
        "name": {
          "description": "The name of the function to call.",
          "type": "string"
        },
        "type": {
          "description": "For function calling, the type is always `function`.",
          "enum": [
            "function"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "name"
      ],
      "title": "Function tool",
      "type": "object"
    },
    "ToolChoiceMCP": {
      "description": "Use this option to force the model to call a specific tool on a remote MCP server.\n",
      "properties": {
        "name": {
          "anyOf": [
            {
              "description": "The name of the tool to call on the server.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "server_label": {
          "description": "The label of the MCP server to use.\n",
          "type": "string"
        },
        "type": {
          "description": "For MCP tools, the type is always `mcp`.",
          "enum": [
            "mcp"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "server_label"
      ],
      "title": "MCP tool",
      "type": "object"
    },
    "ToolChoiceCustom": {
      "description": "Use this option to force the model to call a specific custom tool.\n",
      "properties": {
        "name": {
          "description": "The name of the custom tool to call.",
          "type": "string"
        },
        "type": {
          "description": "For custom tool calling, the type is always `custom`.",
          "enum": [
            "custom"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "name"
      ],
      "title": "Custom tool",
      "type": "object"
    },
    "Tool": {
      "anyOf": [
        {
          "$ref": "#/definitions/FunctionTool"
        },
        {
          "$ref": "#/definitions/FileSearchTool"
        },
        {
          "$ref": "#/definitions/ComputerUsePreviewTool"
        },
        {
          "$ref": "#/definitions/WebSearchTool"
        },
        {
          "$ref": "#/definitions/MCPTool"
        },
        {
          "$ref": "#/definitions/CodeInterpreterTool"
        },
        {
          "$ref": "#/definitions/ImageGenTool"
        },
        {
          "$ref": "#/definitions/LocalShellTool"
        },
        {
          "$ref": "#/definitions/CustomTool"
        },
        {
          "$ref": "#/definitions/WebSearchPreviewTool"
        }
      ],
      "description": "A tool that can be used to generate a response.\n",
      "discriminator": {
        "propertyName": "type"
      }
    },
    "EasyInputMessage": {
      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
      "properties": {
        "content": {
          "anyOf": [
            {
              "description": "A text input to the model.\n",
              "title": "Text input",
              "type": "string"
            },
            {
              "$ref": "#/definitions/InputMessageContentList"
            }
          ],
          "description": "Text, image, or audio input to the model, used to generate a response.\nCan also contain previous assistant responses.\n"
        },
        "role": {
          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
          "enum": [
            "user",
            "assistant",
            "system",
            "developer"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the message input. Always `message`.\n",
          "enum": [
            "message"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "role",
        "content"
      ],
      "title": "Input message",
      "type": "object"
    },
    "Item": {
      "anyOf": [
        {
          "$ref": "#/definitions/InputMessage"
        },
        {
          "$ref": "#/definitions/OutputMessage"
        },
        {
          "$ref": "#/definitions/FileSearchToolCall"
        },
        {
          "$ref": "#/definitions/ComputerToolCall"
        },
        {
          "$ref": "#/definitions/ComputerCallOutputItemParam"
        },
        {
          "$ref": "#/definitions/WebSearchToolCall"
        },
        {
          "$ref": "#/definitions/FunctionToolCall"
        },
        {
          "$ref": "#/definitions/FunctionCallOutputItemParam"
        },
        {
          "$ref": "#/definitions/ReasoningItem"
        },
        {
          "$ref": "#/definitions/ImageGenToolCall"
        },
        {
          "$ref": "#/definitions/CodeInterpreterToolCall"
        },
        {
          "$ref": "#/definitions/LocalShellToolCall"
        },
        {
          "$ref": "#/definitions/LocalShellToolCallOutput"
        },
        {
          "$ref": "#/definitions/MCPListTools"
        },
        {
          "$ref": "#/definitions/MCPApprovalRequest"
        },
        {
          "$ref": "#/definitions/MCPApprovalResponse"
        },
        {
          "$ref": "#/definitions/MCPToolCall"
        },
        {
          "$ref": "#/definitions/CustomToolCallOutput"
        },
        {
          "$ref": "#/definitions/CustomToolCall"
        }
      ],
      "description": "Content item used to generate a response.\n",
      "discriminator": {
        "propertyName": "type"
      },
      "type": "object"
    },
    "ItemReferenceParam": {
      "description": "An internal identifier for an item to reference.",
      "properties": {
        "id": {
          "description": "The ID of the item to reference.",
          "type": "string"
        },
        "type": {
          "anyOf": [
            {
              "default": "item_reference",
              "description": "The type of item to reference. Always `item_reference`.",
              "enum": [
                "item_reference"
              ],
              "type": "string",
              "x-stainless-const": true
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "id"
      ],
      "title": "Item reference",
      "type": "object"
    },
    "Metadata": {
      "anyOf": [
        {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
          "type": "object",
          "x-oaiTypeLabel": "map"
        },
        {
          "type": "null"
        }
      ]
    },
    "ServiceTier": {
      "anyOf": [
        {
          "default": "auto",
          "description": "Specifies the processing type used for serving the request.\n  - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.\n  - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.\n  - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or '[priority](https://openai.com/api-priority-processing/)', then the request will be processed with the corresponding service tier.\n  - When not set, the default behavior is 'auto'.\n\n  When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.\n",
          "enum": [
            "auto",
            "default",
            "flex",
            "scale",
            "priority"
          ],
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "ResponseErrorCode": {
      "description": "The error code for the response.\n",
      "enum": [
        "server_error",
        "rate_limit_exceeded",
        "invalid_prompt",
        "vector_store_timeout",
        "invalid_image",
        "invalid_image_format",
        "invalid_base64_image",
        "invalid_image_url",
        "image_too_large",
        "image_too_small",
        "image_parse_error",
        "image_content_policy_violation",
        "invalid_image_mode",
        "image_file_too_large",
        "unsupported_image_media_type",
        "empty_image_file",
        "failed_to_download_image",
        "image_file_not_found"
      ],
      "type": "string"
    },
    "OutputMessage": {
      "description": "An output message from the model.\n",
      "properties": {
        "content": {
          "description": "The content of the output message.\n",
          "items": {
            "$ref": "#/definitions/OutputMessageContent"
          },
          "type": "array"
        },
        "id": {
          "description": "The unique ID of the output message.\n",
          "type": "string",
          "x-stainless-go-json": "omitzero"
        },
        "role": {
          "description": "The role of the output message. Always `assistant`.\n",
          "enum": [
            "assistant"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "status": {
          "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the output message. Always `message`.\n",
          "enum": [
            "message"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "type",
        "role",
        "content",
        "status"
      ],
      "title": "Output message",
      "type": "object"
    },
    "FileSearchToolCall": {
      "description": "The results of a file search tool call. See the\n[file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.\n",
      "properties": {
        "id": {
          "description": "The unique ID of the file search tool call.\n",
          "type": "string"
        },
        "queries": {
          "description": "The queries used to search for files.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "results": {
          "anyOf": [
            {
              "description": "The results of the file search tool call.\n",
              "items": {
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/VectorStoreFileAttributes"
                  },
                  "file_id": {
                    "description": "The unique ID of the file.\n",
                    "type": "string"
                  },
                  "filename": {
                    "description": "The name of the file.\n",
                    "type": "string"
                  },
                  "score": {
                    "description": "The relevance score of the file - a value between 0 and 1.\n",
                    "format": "float",
                    "type": "number"
                  },
                  "text": {
                    "description": "The text that was retrieved from the file.\n",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "description": "The status of the file search tool call. One of `in_progress`,\n`searching`, `incomplete` or `failed`,\n",
          "enum": [
            "in_progress",
            "searching",
            "completed",
            "incomplete",
            "failed"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the file search tool call. Always `file_search_call`.\n",
          "enum": [
            "file_search_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "type",
        "status",
        "queries"
      ],
      "title": "File search tool call",
      "type": "object"
    },
    "FunctionToolCall": {
      "description": "A tool call to run a function. See the \n[function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.\n",
      "properties": {
        "arguments": {
          "description": "A JSON string of the arguments to pass to the function.\n",
          "type": "string"
        },
        "call_id": {
          "description": "The unique ID of the function tool call generated by the model.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the function tool call.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the function to run.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the function tool call. Always `function_call`.\n",
          "enum": [
            "function_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "call_id",
        "name",
        "arguments"
      ],
      "title": "Function tool call",
      "type": "object"
    },
    "WebSearchToolCall": {
      "description": "The results of a web search tool call. See the \n[web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.\n",
      "properties": {
        "action": {
          "anyOf": [
            {
              "$ref": "#/definitions/WebSearchActionSearch"
            },
            {
              "$ref": "#/definitions/WebSearchActionOpenPage"
            },
            {
              "$ref": "#/definitions/WebSearchActionFind"
            }
          ],
          "description": "An object describing the specific action taken in this web search call.\nIncludes details on how the model used the web (search, open_page, find).\n",
          "discriminator": {
            "propertyName": "type"
          },
          "type": "object"
        },
        "id": {
          "description": "The unique ID of the web search tool call.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the web search tool call.\n",
          "enum": [
            "in_progress",
            "searching",
            "completed",
            "failed"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the web search tool call. Always `web_search_call`.\n",
          "enum": [
            "web_search_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "type",
        "status",
        "action"
      ],
      "title": "Web search tool call",
      "type": "object"
    },
    "ComputerToolCall": {
      "description": "A tool call to a computer use tool. See the \n[computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.\n",
      "properties": {
        "action": {
          "$ref": "#/definitions/ComputerAction"
        },
        "call_id": {
          "description": "An identifier used when responding to the tool call with output.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the computer call.",
          "type": "string"
        },
        "pending_safety_checks": {
          "description": "The pending safety checks for the computer call.\n",
          "items": {
            "$ref": "#/definitions/ComputerToolCallSafetyCheck"
          },
          "type": "array"
        },
        "status": {
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "type": "string"
        },
        "type": {
          "default": "computer_call",
          "description": "The type of the computer call. Always `computer_call`.",
          "enum": [
            "computer_call"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "id",
        "action",
        "call_id",
        "pending_safety_checks",
        "status"
      ],
      "title": "Computer tool call",
      "type": "object"
    },
    "ReasoningItem": {
      "description": "A description of the chain of thought used by a reasoning model while generating\na response. Be sure to include these items in your `input` to the Responses API\nfor subsequent turns of a conversation if you are manually\n[managing context](https://platform.openai.com/docs/guides/conversation-state).\n",
      "properties": {
        "content": {
          "description": "Reasoning text content.\n",
          "items": {
            "$ref": "#/definitions/ReasoningTextContent"
          },
          "type": "array"
        },
        "encrypted_content": {
          "anyOf": [
            {
              "description": "The encrypted content of the reasoning item - populated when a response is\ngenerated with `reasoning.encrypted_content` in the `include` parameter.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "id": {
          "description": "The unique identifier of the reasoning content.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "type": "string"
        },
        "summary": {
          "description": "Reasoning summary content.\n",
          "items": {
            "$ref": "#/definitions/Summary"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of the object. Always `reasoning`.\n",
          "enum": [
            "reasoning"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "summary",
        "type"
      ],
      "title": "Reasoning",
      "type": "object"
    },
    "ImageGenToolCall": {
      "description": "An image generation request made by the model.\n",
      "properties": {
        "id": {
          "description": "The unique ID of the image generation call.\n",
          "type": "string"
        },
        "result": {
          "anyOf": [
            {
              "description": "The generated image encoded in base64.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "description": "The status of the image generation call.\n",
          "enum": [
            "in_progress",
            "completed",
            "generating",
            "failed"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the image generation call. Always `image_generation_call`.\n",
          "enum": [
            "image_generation_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "id",
        "status",
        "result"
      ],
      "title": "Image generation call",
      "type": "object"
    },
    "CodeInterpreterToolCall": {
      "description": "A tool call to run code.\n",
      "properties": {
        "code": {
          "anyOf": [
            {
              "description": "The code to run, or null if not available.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "container_id": {
          "description": "The ID of the container used to run the code.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the code interpreter tool call.\n",
          "type": "string"
        },
        "outputs": {
          "anyOf": [
            {
              "description": "The outputs generated by the code interpreter, such as logs or images.\nCan be null if no outputs are available.\n",
              "discriminator": {
                "propertyName": "type"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CodeInterpreterOutputLogs"
                  },
                  {
                    "$ref": "#/definitions/CodeInterpreterOutputImage"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "description": "The status of the code interpreter tool call. Valid values are `in_progress`, `completed`, `incomplete`, `interpreting`, and `failed`.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete",
            "interpreting",
            "failed"
          ],
          "type": "string"
        },
        "type": {
          "default": "code_interpreter_call",
          "description": "The type of the code interpreter tool call. Always `code_interpreter_call`.\n",
          "enum": [
            "code_interpreter_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "id",
        "status",
        "container_id",
        "code",
        "outputs"
      ],
      "title": "Code interpreter tool call",
      "type": "object"
    },
    "LocalShellToolCall": {
      "description": "A tool call to run a command on the local shell.\n",
      "properties": {
        "action": {
          "$ref": "#/definitions/LocalShellExecAction"
        },
        "call_id": {
          "description": "The unique ID of the local shell tool call generated by the model.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the local shell call.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the local shell call.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the local shell call. Always `local_shell_call`.\n",
          "enum": [
            "local_shell_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "id",
        "call_id",
        "action",
        "status"
      ],
      "title": "Local shell call",
      "type": "object"
    },
    "MCPToolCall": {
      "description": "An invocation of a tool on an MCP server.\n",
      "properties": {
        "arguments": {
          "description": "A JSON string of the arguments passed to the tool.\n",
          "type": "string"
        },
        "error": {
          "anyOf": [
            {
              "description": "The error from the tool call, if any.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "id": {
          "description": "The unique ID of the tool call.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the tool that was run.\n",
          "type": "string"
        },
        "output": {
          "anyOf": [
            {
              "description": "The output from the tool call.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "server_label": {
          "description": "The label of the MCP server running the tool.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the item. Always `mcp_call`.\n",
          "enum": [
            "mcp_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "id",
        "server_label",
        "name",
        "arguments"
      ],
      "title": "MCP tool call",
      "type": "object"
    },
    "MCPListTools": {
      "description": "A list of tools available on an MCP server.\n",
      "properties": {
        "error": {
          "anyOf": [
            {
              "description": "Error message if the server could not list tools.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "id": {
          "description": "The unique ID of the list.\n",
          "type": "string"
        },
        "server_label": {
          "description": "The label of the MCP server.\n",
          "type": "string"
        },
        "tools": {
          "description": "The tools available on the server.\n",
          "items": {
            "$ref": "#/definitions/MCPListToolsTool"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of the item. Always `mcp_list_tools`.\n",
          "enum": [
            "mcp_list_tools"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "id",
        "server_label",
        "tools"
      ],
      "title": "MCP list tools",
      "type": "object"
    },
    "MCPApprovalRequest": {
      "description": "A request for human approval of a tool invocation.\n",
      "properties": {
        "arguments": {
          "description": "A JSON string of arguments for the tool.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the approval request.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the tool to run.\n",
          "type": "string"
        },
        "server_label": {
          "description": "The label of the MCP server making the request.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the item. Always `mcp_approval_request`.\n",
          "enum": [
            "mcp_approval_request"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "id",
        "server_label",
        "name",
        "arguments"
      ],
      "title": "MCP approval request",
      "type": "object"
    },
    "CustomToolCall": {
      "description": "A call to a custom tool created by the model.\n",
      "properties": {
        "call_id": {
          "description": "An identifier used to map this custom tool call to a tool call output.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the custom tool call in the OpenAI platform.\n",
          "type": "string"
        },
        "input": {
          "description": "The input for the custom tool call generated by the model.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the custom tool being called.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the custom tool call. Always `custom_tool_call`.\n",
          "enum": [
            "custom_tool_call"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "call_id",
        "name",
        "input"
      ],
      "title": "Custom tool call",
      "type": "object"
    },
    "OutputContent": {
      "anyOf": [
        {
          "$ref": "#/definitions/OutputTextContent"
        },
        {
          "$ref": "#/definitions/RefusalContent"
        },
        {
          "$ref": "#/definitions/ReasoningTextContent"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "ResponseLogProb": {
      "description": "A logprob is the logarithmic probability that the model assigns to producing \na particular token at a given position in the sequence. Less-negative (higher) \nlogprob values indicate greater model confidence in that token choice.\n",
      "properties": {
        "logprob": {
          "description": "The log probability of this token.\n",
          "type": "number"
        },
        "token": {
          "description": "A possible text token.",
          "type": "string"
        },
        "top_logprobs": {
          "description": "The log probability of the top 20 most likely tokens.\n",
          "items": {
            "properties": {
              "logprob": {
                "description": "The log probability of this token.",
                "type": "number"
              },
              "token": {
                "description": "A possible text token.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "token",
        "logprob"
      ],
      "type": "object"
    },
    "ModelIdsShared": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/ChatModel"
        }
      ],
      "example": "gpt-4o"
    },
    "ResponsePromptVariables": {
      "anyOf": [
        {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/InputTextContent"
              },
              {
                "$ref": "#/definitions/InputImageContent"
              },
              {
                "$ref": "#/definitions/InputFileContent"
              }
            ],
            "x-oaiExpandable": true,
            "x-oaiTypeLabel": "map"
          },
          "description": "Optional map of values to substitute in for variables in your\nprompt. The substitution values can either be strings, or other\nResponse input types like images or files.\n",
          "title": "Prompt Variables",
          "type": "object",
          "x-oaiExpandable": true,
          "x-oaiTypeLabel": "map"
        },
        {
          "type": "null"
        }
      ]
    },
    "ReasoningEffort": {
      "anyOf": [
        {
          "default": "medium",
          "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
          "enum": [
            "minimal",
            "low",
            "medium",
            "high"
          ],
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "ResponseFormatText": {
      "description": "Default response format. Used to generate text responses.\n",
      "properties": {
        "type": {
          "description": "The type of response format being defined. Always `text`.",
          "enum": [
            "text"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "Text",
      "type": "object"
    },
    "TextResponseFormatJsonSchema": {
      "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
      "properties": {
        "description": {
          "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/ResponseFormatJsonSchemaSchema"
        },
        "strict": {
          "anyOf": [
            {
              "default": false,
              "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "description": "The type of response format being defined. Always `json_schema`.",
          "enum": [
            "json_schema"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "schema",
        "name"
      ],
      "title": "JSON schema",
      "type": "object"
    },
    "ResponseFormatJsonObject": {
      "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
      "properties": {
        "type": {
          "description": "The type of response format being defined. Always `json_object`.",
          "enum": [
            "json_object"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "JSON object",
      "type": "object"
    },
    "FunctionTool": {
      "description": "Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).",
      "properties": {
        "description": {
          "anyOf": [
            {
              "description": "A description of the function. Used by the model to determine whether or not to call the function.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "description": "The name of the function to call.",
          "type": "string"
        },
        "parameters": {
          "anyOf": [
            {
              "additionalProperties": {},
              "description": "A JSON schema object describing the parameters of the function.",
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "strict": {
          "anyOf": [
            {
              "description": "Whether to enforce strict parameter validation. Default `true`.",
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "default": "function",
          "description": "The type of the function tool. Always `function`.",
          "enum": [
            "function"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "name",
        "strict",
        "parameters"
      ],
      "title": "Function",
      "type": "object"
    },
    "FileSearchTool": {
      "description": "A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).",
      "properties": {
        "filters": {
          "anyOf": [
            {
              "$ref": "#/definitions/Filters",
              "description": "A filter to apply."
            },
            {
              "type": "null"
            }
          ]
        },
        "max_num_results": {
          "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive.",
          "type": "integer"
        },
        "ranking_options": {
          "$ref": "#/definitions/RankingOptions",
          "description": "Ranking options for search."
        },
        "type": {
          "default": "file_search",
          "description": "The type of the file search tool. Always `file_search`.",
          "enum": [
            "file_search"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "vector_store_ids": {
          "description": "The IDs of the vector stores to search.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "vector_store_ids"
      ],
      "title": "File search",
      "type": "object"
    },
    "ComputerUsePreviewTool": {
      "description": "A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).",
      "properties": {
        "display_height": {
          "description": "The height of the computer display.",
          "type": "integer"
        },
        "display_width": {
          "description": "The width of the computer display.",
          "type": "integer"
        },
        "environment": {
          "$ref": "#/definitions/ComputerEnvironment",
          "description": "The type of computer environment to control."
        },
        "type": {
          "default": "computer_use_preview",
          "description": "The type of the computer use tool. Always `computer_use_preview`.",
          "enum": [
            "computer_use_preview"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "environment",
        "display_width",
        "display_height"
      ],
      "title": "Computer use preview",
      "type": "object"
    },
    "WebSearchTool": {
      "description": "Search the Internet for sources related to the prompt. Learn more about the\n[web search tool](https://platform.openai.com/docs/guides/tools-web-search).\n",
      "properties": {
        "filters": {
          "anyOf": [
            {
              "description": "Filters for the search.\n",
              "properties": {
                "allowed_domains": {
                  "anyOf": [
                    {
                      "default": [],
                      "description": "Allowed domains for the search. If not provided, all domains are allowed.\nSubdomains of the provided domains are allowed as well.\n\nExample: `[\"pubmed.ncbi.nlm.nih.gov\"]`\n",
                      "items": {
                        "description": "Allowed domain for the search.",
                        "type": "string"
                      },
                      "title": "Allowed domains for the search.",
                      "type": "array"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "search_context_size": {
          "default": "medium",
          "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "type": "string"
        },
        "type": {
          "default": "web_search",
          "description": "The type of the web search tool. One of `web_search` or `web_search_2025_08_26`.",
          "enum": [
            "web_search",
            "web_search_2025_08_26"
          ],
          "type": "string"
        },
        "user_location": {
          "$ref": "#/definitions/WebSearchApproximateLocation"
        }
      },
      "required": [
        "type"
      ],
      "title": "Web search",
      "type": "object"
    },
    "MCPTool": {
      "description": "Give the model access to additional tools via remote Model Context Protocol\n(MCP) servers. [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp).\n",
      "properties": {
        "allowed_tools": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A string array of allowed tool names",
                  "items": {
                    "type": "string"
                  },
                  "title": "MCP allowed tools",
                  "type": "array"
                },
                {
                  "$ref": "#/definitions/MCPToolFilter"
                }
              ],
              "description": "List of allowed tool names or a filter object.\n"
            },
            {
              "type": "null"
            }
          ]
        },
        "authorization": {
          "description": "An OAuth access token that can be used with a remote MCP server, either\nwith a custom MCP server URL or a service connector. Your application\nmust handle the OAuth authorization flow and provide the token here.\n",
          "type": "string"
        },
        "connector_id": {
          "description": "Identifier for service connectors, like those available in ChatGPT. One of\n`server_url` or `connector_id` must be provided. Learn more about service\nconnectors [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\nCurrently supported `connector_id` values are:\n\n- Dropbox: `connector_dropbox`\n- Gmail: `connector_gmail`\n- Google Calendar: `connector_googlecalendar`\n- Google Drive: `connector_googledrive`\n- Microsoft Teams: `connector_microsoftteams`\n- Outlook Calendar: `connector_outlookcalendar`\n- Outlook Email: `connector_outlookemail`\n- SharePoint: `connector_sharepoint`\n",
          "enum": [
            "connector_dropbox",
            "connector_gmail",
            "connector_googlecalendar",
            "connector_googledrive",
            "connector_microsoftteams",
            "connector_outlookcalendar",
            "connector_outlookemail",
            "connector_sharepoint"
          ],
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Optional HTTP headers to send to the MCP server. Use for authentication\nor other purposes.\n",
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "require_approval": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "description": "Specify which of the MCP server's tools require approval. Can be\n`always`, `never`, or a filter object associated with tools\nthat require approval.\n",
                  "properties": {
                    "always": {
                      "$ref": "#/definitions/MCPToolFilter"
                    },
                    "never": {
                      "$ref": "#/definitions/MCPToolFilter"
                    }
                  },
                  "title": "MCP tool approval filter",
                  "type": "object"
                },
                {
                  "description": "Specify a single approval policy for all tools. One of `always` or\n`never`. When set to `always`, all tools will require approval. When\nset to `never`, all tools will not require approval.\n",
                  "enum": [
                    "always",
                    "never"
                  ],
                  "title": "MCP tool approval setting",
                  "type": "string"
                }
              ],
              "default": "always",
              "description": "Specify which of the MCP server's tools require approval."
            },
            {
              "type": "null"
            }
          ]
        },
        "server_description": {
          "description": "Optional description of the MCP server, used to provide more context.\n",
          "type": "string"
        },
        "server_label": {
          "description": "A label for this MCP server, used to identify it in tool calls.\n",
          "type": "string"
        },
        "server_url": {
          "description": "The URL for the MCP server. One of `server_url` or `connector_id` must be\nprovided.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the MCP tool. Always `mcp`.",
          "enum": [
            "mcp"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "server_label"
      ],
      "title": "MCP tool",
      "type": "object"
    },
    "CodeInterpreterTool": {
      "description": "A tool that runs Python code to help generate a response to a prompt.\n",
      "properties": {
        "container": {
          "anyOf": [
            {
              "description": "The container ID.",
              "type": "string"
            },
            {
              "$ref": "#/definitions/CodeInterpreterToolAuto"
            }
          ],
          "description": "The code interpreter container. Can be a container ID or an object that\nspecifies uploaded file IDs to make available to your code.\n"
        },
        "type": {
          "description": "The type of the code interpreter tool. Always `code_interpreter`.\n",
          "enum": [
            "code_interpreter"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "container"
      ],
      "title": "Code interpreter",
      "type": "object"
    },
    "ImageGenTool": {
      "description": "A tool that generates images using a model like `gpt-image-1`.\n",
      "properties": {
        "background": {
          "default": "auto",
          "description": "Background type for the generated image. One of `transparent`, \n`opaque`, or `auto`. Default: `auto`.\n",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ],
          "type": "string"
        },
        "input_fidelity": {
          "$ref": "#/definitions/ImageInputFidelity"
        },
        "input_image_mask": {
          "additionalProperties": false,
          "description": "Optional mask for inpainting. Contains `image_url` \n(string, optional) and `file_id` (string, optional).\n",
          "properties": {
            "file_id": {
              "description": "File ID for the mask image.\n",
              "type": "string"
            },
            "image_url": {
              "description": "Base64-encoded mask image.\n",
              "type": "string"
            }
          },
          "required": [],
          "type": "object"
        },
        "model": {
          "default": "gpt-image-1",
          "description": "The image generation model to use. Default: `gpt-image-1`.\n",
          "enum": [
            "gpt-image-1"
          ],
          "type": "string"
        },
        "moderation": {
          "default": "auto",
          "description": "Moderation level for the generated image. Default: `auto`.\n",
          "enum": [
            "auto",
            "low"
          ],
          "type": "string"
        },
        "output_compression": {
          "default": 100,
          "description": "Compression level for the output image. Default: 100.\n",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "output_format": {
          "default": "png",
          "description": "The output format of the generated image. One of `png`, `webp`, or \n`jpeg`. Default: `png`.\n",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ],
          "type": "string"
        },
        "partial_images": {
          "default": 0,
          "description": "Number of partial images to generate in streaming mode, from 0 (default value) to 3.\n",
          "maximum": 3,
          "minimum": 0,
          "type": "integer"
        },
        "quality": {
          "default": "auto",
          "description": "The quality of the generated image. One of `low`, `medium`, `high`, \nor `auto`. Default: `auto`.\n",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ],
          "type": "string"
        },
        "size": {
          "default": "auto",
          "description": "The size of the generated image. One of `1024x1024`, `1024x1536`, \n`1536x1024`, or `auto`. Default: `auto`.\n",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the image generation tool. Always `image_generation`.\n",
          "enum": [
            "image_generation"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "Image generation tool",
      "type": "object"
    },
    "LocalShellTool": {
      "description": "A tool that allows the model to execute shell commands in a local environment.\n",
      "properties": {
        "type": {
          "description": "The type of the local shell tool. Always `local_shell`.",
          "enum": [
            "local_shell"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "Local shell tool",
      "type": "object"
    },
    "CustomTool": {
      "description": "A custom tool that processes input using a specified format. Learn more about\n[custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools).\n",
      "properties": {
        "description": {
          "description": "Optional description of the custom tool, used to provide more context.\n",
          "type": "string"
        },
        "format": {
          "anyOf": [
            {
              "additionalProperties": false,
              "description": "Unconstrained free-form text.",
              "properties": {
                "type": {
                  "description": "Unconstrained text format. Always `text`.",
                  "enum": [
                    "text"
                  ],
                  "type": "string",
                  "x-stainless-const": true
                }
              },
              "required": [
                "type"
              ],
              "title": "Text format",
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "A grammar defined by the user.",
              "properties": {
                "definition": {
                  "description": "The grammar definition.",
                  "type": "string"
                },
                "syntax": {
                  "description": "The syntax of the grammar definition. One of `lark` or `regex`.",
                  "enum": [
                    "lark",
                    "regex"
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Grammar format. Always `grammar`.",
                  "enum": [
                    "grammar"
                  ],
                  "type": "string",
                  "x-stainless-const": true
                }
              },
              "required": [
                "type",
                "definition",
                "syntax"
              ],
              "title": "Grammar format",
              "type": "object"
            }
          ],
          "description": "The input format for the custom tool. Default is unconstrained text.\n",
          "discriminator": {
            "propertyName": "type"
          }
        },
        "name": {
          "description": "The name of the custom tool, used to identify it in tool calls.",
          "type": "string"
        },
        "type": {
          "description": "The type of the custom tool. Always `custom`.",
          "enum": [
            "custom"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "name"
      ],
      "title": "Custom tool",
      "type": "object"
    },
    "WebSearchPreviewTool": {
      "description": "This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).",
      "properties": {
        "search_context_size": {
          "$ref": "#/definitions/SearchContextSize",
          "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default."
        },
        "type": {
          "default": "web_search_preview",
          "description": "The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.",
          "enum": [
            "web_search_preview",
            "web_search_preview_2025_03_11"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "user_location": {
          "anyOf": [
            {
              "$ref": "#/definitions/ApproximateLocation",
              "description": "The user's location."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "title": "Web search preview",
      "type": "object"
    },
    "InputMessageContentList": {
      "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
      "items": {
        "$ref": "#/definitions/InputContent"
      },
      "title": "Input item content list",
      "type": "array"
    },
    "InputMessage": {
      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role.\n",
      "properties": {
        "content": {
          "$ref": "#/definitions/InputMessageContentList"
        },
        "role": {
          "description": "The role of the message input. One of `user`, `system`, or `developer`.\n",
          "enum": [
            "user",
            "system",
            "developer"
          ],
          "type": "string"
        },
        "status": {
          "description": "The status of item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the message input. Always set to `message`.\n",
          "enum": [
            "message"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "role",
        "content"
      ],
      "title": "Input message",
      "type": "object"
    },
    "ComputerCallOutputItemParam": {
      "description": "The output of a computer tool call.",
      "properties": {
        "acknowledged_safety_checks": {
          "anyOf": [
            {
              "description": "The safety checks reported by the API that have been acknowledged by the developer.",
              "items": {
                "$ref": "#/definitions/ComputerCallSafetyCheckParam"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ]
        },
        "call_id": {
          "description": "The ID of the computer tool call that produced the output.",
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "id": {
          "anyOf": [
            {
              "description": "The ID of the computer tool call output.",
              "example": "cuo_123",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "output": {
          "$ref": "#/definitions/ComputerScreenshotImage"
        },
        "status": {
          "anyOf": [
            {
              "$ref": "#/definitions/FunctionCallItemStatus",
              "description": "The status of the message input. One of `in_progress`, `completed`, or `incomplete`. Populated when input items are returned via API."
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "default": "computer_call_output",
          "description": "The type of the computer tool call output. Always `computer_call_output`.",
          "enum": [
            "computer_call_output"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "call_id",
        "type",
        "output"
      ],
      "title": "Computer tool call output",
      "type": "object"
    },
    "FunctionCallOutputItemParam": {
      "description": "The output of a function tool call.",
      "properties": {
        "call_id": {
          "description": "The unique ID of the function tool call generated by the model.",
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "id": {
          "anyOf": [
            {
              "description": "The unique ID of the function tool call output. Populated when this item is returned via API.",
              "example": "fc_123",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "output": {
          "anyOf": [
            {
              "description": "A JSON string of the output of the function tool call.",
              "maxLength": 10485760,
              "type": "string"
            }
          ]
        },
        "status": {
          "anyOf": [
            {
              "$ref": "#/definitions/FunctionCallItemStatus",
              "description": "The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API."
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "default": "function_call_output",
          "description": "The type of the function tool call output. Always `function_call_output`.",
          "enum": [
            "function_call_output"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "call_id",
        "type",
        "output"
      ],
      "title": "Function tool call output",
      "type": "object"
    },
    "LocalShellToolCallOutput": {
      "description": "The output of a local shell tool call.\n",
      "properties": {
        "id": {
          "description": "The unique ID of the local shell tool call generated by the model.\n",
          "type": "string"
        },
        "output": {
          "description": "A JSON string of the output of the local shell tool call.\n",
          "type": "string"
        },
        "status": {
          "anyOf": [
            {
              "description": "The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "description": "The type of the local shell tool call output. Always `local_shell_call_output`.\n",
          "enum": [
            "local_shell_call_output"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "type",
        "call_id",
        "output"
      ],
      "title": "Local shell call output",
      "type": "object"
    },
    "MCPApprovalResponse": {
      "description": "A response to an MCP approval request.\n",
      "properties": {
        "approval_request_id": {
          "description": "The ID of the approval request being answered.\n",
          "type": "string"
        },
        "approve": {
          "description": "Whether the request was approved.\n",
          "type": "boolean"
        },
        "id": {
          "anyOf": [
            {
              "description": "The unique ID of the approval response\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "reason": {
          "anyOf": [
            {
              "description": "Optional reason for the decision.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "description": "The type of the item. Always `mcp_approval_response`.\n",
          "enum": [
            "mcp_approval_response"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "request_id",
        "approve",
        "approval_request_id"
      ],
      "title": "MCP approval response",
      "type": "object"
    },
    "CustomToolCallOutput": {
      "description": "The output of a custom tool call from your code, being sent back to the model.\n",
      "properties": {
        "call_id": {
          "description": "The call ID, used to map this custom tool call output to a custom tool call.\n",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the custom tool call output in the OpenAI platform.\n",
          "type": "string"
        },
        "output": {
          "description": "The output from the custom tool call generated by your code.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of the custom tool call output. Always `custom_tool_call_output`.\n",
          "enum": [
            "custom_tool_call_output"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "call_id",
        "output"
      ],
      "title": "Custom tool call output",
      "type": "object"
    },
    "OutputMessageContent": {
      "anyOf": [
        {
          "$ref": "#/definitions/OutputTextContent"
        },
        {
          "$ref": "#/definitions/RefusalContent"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "VectorStoreFileAttributes": {
      "anyOf": [
        {
          "additionalProperties": {
            "anyOf": [
              {
                "maxLength": 512,
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. Keys are strings\nwith a maximum length of 64 characters. Values are strings with a maximum\nlength of 512 characters, booleans, or numbers.\n",
          "maxProperties": 16,
          "propertyNames": {
            "maxLength": 64,
            "type": "string"
          },
          "type": "object",
          "x-oaiTypeLabel": "map"
        },
        {
          "type": "null"
        }
      ]
    },
    "WebSearchActionSearch": {
      "description": "Action type \"search\" - Performs a web search query.\n",
      "properties": {
        "query": {
          "description": "The search query.\n",
          "type": "string"
        },
        "sources": {
          "description": "The sources used in the search.\n",
          "items": {
            "description": "A source used in the search.\n",
            "properties": {
              "type": {
                "description": "The type of source. Always `url`.\n",
                "enum": [
                  "url"
                ],
                "type": "string",
                "x-stainless-const": true
              },
              "url": {
                "description": "The URL of the source.\n",
                "type": "string"
              }
            },
            "required": [
              "type",
              "url"
            ],
            "title": "Web search source",
            "type": "object"
          },
          "title": "Web search sources",
          "type": "array"
        },
        "type": {
          "description": "The action type.\n",
          "enum": [
            "search"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "query"
      ],
      "title": "Search action",
      "type": "object"
    },
    "WebSearchActionOpenPage": {
      "description": "Action type \"open_page\" - Opens a specific URL from search results.\n",
      "properties": {
        "type": {
          "description": "The action type.\n",
          "enum": [
            "open_page"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "url": {
          "description": "The URL opened by the model.\n",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "type",
        "url"
      ],
      "title": "Open page action",
      "type": "object"
    },
    "WebSearchActionFind": {
      "description": "Action type \"find\": Searches for a pattern within a loaded page.\n",
      "properties": {
        "pattern": {
          "description": "The pattern or text to search for within the page.\n",
          "type": "string"
        },
        "type": {
          "description": "The action type.\n",
          "enum": [
            "find"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "url": {
          "description": "The URL of the page searched for the pattern.\n",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "type",
        "url",
        "pattern"
      ],
      "title": "Find action",
      "type": "object"
    },
    "ComputerAction": {
      "anyOf": [
        {
          "$ref": "#/definitions/Click"
        },
        {
          "$ref": "#/definitions/DoubleClick"
        },
        {
          "$ref": "#/definitions/Drag"
        },
        {
          "$ref": "#/definitions/KeyPress"
        },
        {
          "$ref": "#/definitions/Move"
        },
        {
          "$ref": "#/definitions/Screenshot"
        },
        {
          "$ref": "#/definitions/Scroll"
        },
        {
          "$ref": "#/definitions/Type"
        },
        {
          "$ref": "#/definitions/Wait"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "ComputerToolCallSafetyCheck": {
      "description": "A pending safety check for the computer call.\n",
      "properties": {
        "code": {
          "description": "The type of the pending safety check.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the pending safety check.",
          "type": "string"
        },
        "message": {
          "description": "Details about the pending safety check.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "code",
        "message"
      ],
      "type": "object"
    },
    "ReasoningTextContent": {
      "description": "Reasoning text from the model.",
      "properties": {
        "text": {
          "description": "The reasoning text from the model.",
          "type": "string"
        },
        "type": {
          "default": "reasoning_text",
          "description": "The type of the reasoning text. Always `reasoning_text`.",
          "enum": [
            "reasoning_text"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "text"
      ],
      "title": "Reasoning text",
      "type": "object"
    },
    "Summary": {
      "description": "A summary text from the model.",
      "properties": {
        "text": {
          "description": "A summary of the reasoning output from the model so far.",
          "type": "string"
        },
        "type": {
          "default": "summary_text",
          "description": "The type of the object. Always `summary_text`.",
          "enum": [
            "summary_text"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "text"
      ],
      "title": "Summary text",
      "type": "object"
    },
    "CodeInterpreterOutputLogs": {
      "description": "The logs output from the code interpreter.\n",
      "properties": {
        "logs": {
          "description": "The logs output from the code interpreter.",
          "type": "string"
        },
        "type": {
          "default": "logs",
          "description": "The type of the output. Always 'logs'.",
          "enum": [
            "logs"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "logs"
      ],
      "title": "Code interpreter output logs",
      "type": "object"
    },
    "CodeInterpreterOutputImage": {
      "description": "The image output from the code interpreter.\n",
      "properties": {
        "type": {
          "default": "image",
          "description": "The type of the output. Always 'image'.",
          "enum": [
            "image"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "url": {
          "description": "The URL of the image output from the code interpreter.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "url"
      ],
      "title": "Code interpreter output image",
      "type": "object"
    },
    "LocalShellExecAction": {
      "description": "Execute a shell command on the server.\n",
      "properties": {
        "command": {
          "description": "The command to run.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables to set for the command.\n",
          "type": "object"
        },
        "timeout_ms": {
          "anyOf": [
            {
              "description": "Optional timeout in milliseconds for the command.\n",
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "description": "The type of the local shell action. Always `exec`.\n",
          "enum": [
            "exec"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "user": {
          "anyOf": [
            {
              "description": "Optional user to run the command as.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "working_directory": {
          "anyOf": [
            {
              "description": "Optional working directory to run the command in.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "type",
        "command",
        "env"
      ],
      "title": "Local shell exec action",
      "type": "object"
    },
    "MCPListToolsTool": {
      "description": "A tool available on an MCP server.\n",
      "properties": {
        "annotations": {
          "anyOf": [
            {
              "description": "Additional annotations about the tool.\n",
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "anyOf": [
            {
              "description": "The description of the tool.\n",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "input_schema": {
          "description": "The JSON schema describing the tool's input.\n",
          "type": "object"
        },
        "name": {
          "description": "The name of the tool.\n",
          "type": "string"
        }
      },
      "required": [
        "name",
        "input_schema"
      ],
      "title": "MCP list tools tool",
      "type": "object"
    },
    "OutputTextContent": {
      "description": "A text output from the model.",
      "properties": {
        "annotations": {
          "description": "The annotations of the text output.",
          "items": {
            "$ref": "#/definitions/Annotation"
          },
          "type": "array"
        },
        "logprobs": {
          "items": {
            "$ref": "#/definitions/LogProb"
          },
          "type": "array"
        },
        "text": {
          "description": "The text output from the model.",
          "type": "string"
        },
        "type": {
          "default": "output_text",
          "description": "The type of the output text. Always `output_text`.",
          "enum": [
            "output_text"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "text",
        "annotations"
      ],
      "title": "Output text",
      "type": "object"
    },
    "RefusalContent": {
      "description": "A refusal from the model.",
      "properties": {
        "refusal": {
          "description": "The refusal explanation from the model.",
          "type": "string"
        },
        "type": {
          "default": "refusal",
          "description": "The type of the refusal. Always `refusal`.",
          "enum": [
            "refusal"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "refusal"
      ],
      "title": "Refusal",
      "type": "object"
    },
    "ChatModel": {
      "enum": [
        "gpt-4.1",
        "gpt-4.1-mini",
        "gpt-4.1-nano",
        "gpt-4.1-2025-04-14",
        "gpt-4.1-mini-2025-04-14",
        "gpt-4.1-nano-2025-04-14",
        "o4-mini",
        "o4-mini-2025-04-16",
        "o3",
        "o3-2025-04-16",
        "o3-mini",
        "o3-mini-2025-01-31",
        "o1",
        "o1-2024-12-17",
        "o1-preview",
        "o1-preview-2024-09-12",
        "o1-mini",
        "o1-mini-2024-09-12",
        "gpt-4o",
        "gpt-4o-2024-11-20",
        "gpt-4o-2024-08-06",
        "gpt-4o-2024-05-13",
        "gpt-4o-audio-preview",
        "gpt-4o-audio-preview-2024-10-01",
        "gpt-4o-audio-preview-2024-12-17",
        "gpt-4o-audio-preview-2025-06-03",
        "gpt-4o-mini-audio-preview",
        "gpt-4o-mini-audio-preview-2024-12-17",
        "gpt-4o-search-preview",
        "gpt-4o-mini-search-preview",
        "gpt-4o-search-preview-2025-03-11",
        "gpt-4o-mini-search-preview-2025-03-11",
        "chatgpt-4o-latest",
        "codex-mini-latest",
        "gpt-4o-mini",
        "gpt-4o-mini-2024-07-18",
        "gpt-4-turbo",
        "gpt-4-turbo-2024-04-09",
        "gpt-4-0125-preview",
        "gpt-4-turbo-preview",
        "gpt-4-1106-preview",
        "gpt-4-vision-preview",
        "gpt-4",
        "gpt-4-0314",
        "gpt-4-0613",
        "gpt-4-32k",
        "gpt-4-32k-0314",
        "gpt-4-32k-0613",
        "gpt-3.5-turbo",
        "gpt-3.5-turbo-16k",
        "gpt-3.5-turbo-0301",
        "gpt-3.5-turbo-0613",
        "gpt-3.5-turbo-1106",
        "gpt-3.5-turbo-0125",
        "gpt-3.5-turbo-16k-0613"
      ],
      "type": "string",
      "x-stainless-nominal": false
    },
    "InputTextContent": {
      "description": "A text input to the model.",
      "properties": {
        "text": {
          "description": "The text input to the model.",
          "type": "string"
        },
        "type": {
          "default": "input_text",
          "description": "The type of the input item. Always `input_text`.",
          "enum": [
            "input_text"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "text"
      ],
      "title": "Input text",
      "type": "object"
    },
    "InputImageContent": {
      "description": "An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).",
      "properties": {
        "detail": {
          "$ref": "#/definitions/ImageDetail",
          "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`."
        },
        "file_id": {
          "anyOf": [
            {
              "description": "The ID of the file to be sent to the model.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "image_url": {
          "anyOf": [
            {
              "description": "The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "default": "input_image",
          "description": "The type of the input item. Always `input_image`.",
          "enum": [
            "input_image"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "detail"
      ],
      "title": "Input image",
      "type": "object"
    },
    "InputFileContent": {
      "description": "A file input to the model.",
      "properties": {
        "file_data": {
          "description": "The content of the file to be sent to the model.\n",
          "type": "string"
        },
        "file_id": {
          "anyOf": [
            {
              "description": "The ID of the file to be sent to the model.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "file_url": {
          "description": "The URL of the file to be sent to the model.",
          "type": "string"
        },
        "filename": {
          "description": "The name of the file to be sent to the model.",
          "type": "string"
        },
        "type": {
          "default": "input_file",
          "description": "The type of the input item. Always `input_file`.",
          "enum": [
            "input_file"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "Input file",
      "type": "object"
    },
    "ResponseFormatJsonSchemaSchema": {
      "additionalProperties": true,
      "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
      "title": "JSON schema",
      "type": "object"
    },
    "Filters": {
      "anyOf": [
        {
          "$ref": "#/definitions/ComparisonFilter"
        },
        {
          "$ref": "#/definitions/CompoundFilter"
        }
      ]
    },
    "RankingOptions": {
      "properties": {
        "ranker": {
          "$ref": "#/definitions/RankerVersionType",
          "description": "The ranker to use for the file search."
        },
        "score_threshold": {
          "description": "The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results.",
          "type": "number"
        }
      },
      "required": [],
      "type": "object"
    },
    "ComputerEnvironment": {
      "enum": [
        "windows",
        "mac",
        "linux",
        "ubuntu",
        "browser"
      ],
      "type": "string"
    },
    "WebSearchApproximateLocation": {
      "anyOf": [
        {
          "description": "The approximate location of the user.\n",
          "properties": {
            "city": {
              "anyOf": [
                {
                  "description": "Free text input for the city of the user, e.g. `San Francisco`.",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "country": {
              "anyOf": [
                {
                  "description": "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`.",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "region": {
              "anyOf": [
                {
                  "description": "Free text input for the region of the user, e.g. `California`.",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "timezone": {
              "anyOf": [
                {
                  "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`.",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": {
              "default": "approximate",
              "description": "The type of location approximation. Always `approximate`.",
              "enum": [
                "approximate"
              ],
              "type": "string",
              "x-stainless-const": true
            }
          },
          "title": "Web search approximate location",
          "type": "object"
        },
        {
          "type": "null"
        }
      ]
    },
    "MCPToolFilter": {
      "additionalProperties": false,
      "description": "A filter object to specify which tools are allowed.\n",
      "properties": {
        "read_only": {
          "description": "Indicates whether or not a tool modifies data or is read-only. If an\nMCP server is [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\nit will match this filter.\n",
          "type": "boolean"
        },
        "tool_names": {
          "description": "List of allowed tool names.",
          "items": {
            "type": "string"
          },
          "title": "MCP allowed tools",
          "type": "array"
        }
      },
      "required": [],
      "title": "MCP tool filter",
      "type": "object"
    },
    "CodeInterpreterToolAuto": {
      "description": "Configuration for a code interpreter container. Optionally specify the IDs\nof the files to run the code on.\n",
      "properties": {
        "file_ids": {
          "description": "An optional list of uploaded files to make available to your code.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Always `auto`.",
          "enum": [
            "auto"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "CodeInterpreterContainerAuto",
      "type": "object"
    },
    "ImageInputFidelity": {
      "anyOf": [
        {
          "default": "low",
          "description": "Control how much effort the model will exert to match the style and features,\nespecially facial features, of input images. This parameter is only supported\nfor `gpt-image-1`. Supports `high` and `low`. Defaults to `low`.\n",
          "enum": [
            "high",
            "low"
          ],
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "SearchContextSize": {
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "type": "string"
    },
    "ApproximateLocation": {
      "properties": {
        "city": {
          "anyOf": [
            {
              "description": "Free text input for the city of the user, e.g. `San Francisco`.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "country": {
          "anyOf": [
            {
              "description": "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "region": {
          "anyOf": [
            {
              "description": "Free text input for the region of the user, e.g. `California`.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "timezone": {
          "anyOf": [
            {
              "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "default": "approximate",
          "description": "The type of location approximation. Always `approximate`.",
          "enum": [
            "approximate"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "InputContent": {
      "anyOf": [
        {
          "$ref": "#/definitions/InputTextContent"
        },
        {
          "$ref": "#/definitions/InputImageContent"
        },
        {
          "$ref": "#/definitions/InputFileContent"
        },
        {
          "$ref": "#/definitions/InputAudio"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "ComputerCallSafetyCheckParam": {
      "description": "A pending safety check for the computer call.",
      "properties": {
        "code": {
          "anyOf": [
            {
              "description": "The type of the pending safety check.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "id": {
          "description": "The ID of the pending safety check.",
          "type": "string"
        },
        "message": {
          "anyOf": [
            {
              "description": "Details about the pending safety check.",
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ComputerScreenshotImage": {
      "description": "A computer screenshot image used with the computer use tool.\n",
      "properties": {
        "file_id": {
          "description": "The identifier of an uploaded file that contains the screenshot.",
          "type": "string"
        },
        "image_url": {
          "description": "The URL of the screenshot image.",
          "type": "string"
        },
        "type": {
          "default": "computer_screenshot",
          "description": "Specifies the event type. For a computer screenshot, this property is \nalways set to `computer_screenshot`.\n",
          "enum": [
            "computer_screenshot"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "FunctionCallItemStatus": {
      "enum": [
        "in_progress",
        "completed",
        "incomplete"
      ],
      "type": "string"
    },
    "Click": {
      "description": "A click action.\n",
      "properties": {
        "button": {
          "description": "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.\n",
          "enum": [
            "left",
            "right",
            "wheel",
            "back",
            "forward"
          ],
          "type": "string"
        },
        "type": {
          "default": "click",
          "description": "Specifies the event type. For a click action, this property is \nalways set to `click`.\n",
          "enum": [
            "click"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "x": {
          "description": "The x-coordinate where the click occurred.\n",
          "type": "integer"
        },
        "y": {
          "description": "The y-coordinate where the click occurred.\n",
          "type": "integer"
        }
      },
      "required": [
        "type",
        "button",
        "x",
        "y"
      ],
      "title": "Click",
      "type": "object"
    },
    "DoubleClick": {
      "description": "A double click action.\n",
      "properties": {
        "type": {
          "default": "double_click",
          "description": "Specifies the event type. For a double click action, this property is \nalways set to `double_click`.\n",
          "enum": [
            "double_click"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "x": {
          "description": "The x-coordinate where the double click occurred.\n",
          "type": "integer"
        },
        "y": {
          "description": "The y-coordinate where the double click occurred.\n",
          "type": "integer"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "title": "DoubleClick",
      "type": "object"
    },
    "Drag": {
      "description": "A drag action.\n",
      "properties": {
        "path": {
          "description": "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n",
          "items": {
            "$ref": "#/definitions/Coordinate",
            "description": "A series of x/y coordinate pairs in the drag path.\n",
            "title": "Drag path coordinates"
          },
          "type": "array"
        },
        "type": {
          "default": "drag",
          "description": "Specifies the event type. For a drag action, this property is \nalways set to `drag`.\n",
          "enum": [
            "drag"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "path"
      ],
      "title": "Drag",
      "type": "object"
    },
    "KeyPress": {
      "description": "A collection of keypresses the model would like to perform.\n",
      "properties": {
        "keys": {
          "description": "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key.\n",
          "items": {
            "description": "One of the keys the model is requesting to be pressed.\n",
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "default": "keypress",
          "description": "Specifies the event type. For a keypress action, this property is \nalways set to `keypress`.\n",
          "enum": [
            "keypress"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "keys"
      ],
      "title": "KeyPress",
      "type": "object"
    },
    "Move": {
      "description": "A mouse move action.\n",
      "properties": {
        "type": {
          "default": "move",
          "description": "Specifies the event type. For a move action, this property is \nalways set to `move`.\n",
          "enum": [
            "move"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "x": {
          "description": "The x-coordinate to move to.\n",
          "type": "integer"
        },
        "y": {
          "description": "The y-coordinate to move to.\n",
          "type": "integer"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "title": "Move",
      "type": "object"
    },
    "Screenshot": {
      "description": "A screenshot action.\n",
      "properties": {
        "type": {
          "default": "screenshot",
          "description": "Specifies the event type. For a screenshot action, this property is \nalways set to `screenshot`.\n",
          "enum": [
            "screenshot"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "Screenshot",
      "type": "object"
    },
    "Scroll": {
      "description": "A scroll action.\n",
      "properties": {
        "scroll_x": {
          "description": "The horizontal scroll distance.\n",
          "type": "integer"
        },
        "scroll_y": {
          "description": "The vertical scroll distance.\n",
          "type": "integer"
        },
        "type": {
          "default": "scroll",
          "description": "Specifies the event type. For a scroll action, this property is \nalways set to `scroll`.\n",
          "enum": [
            "scroll"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "x": {
          "description": "The x-coordinate where the scroll occurred.\n",
          "type": "integer"
        },
        "y": {
          "description": "The y-coordinate where the scroll occurred.\n",
          "type": "integer"
        }
      },
      "required": [
        "type",
        "x",
        "y",
        "scroll_x",
        "scroll_y"
      ],
      "title": "Scroll",
      "type": "object"
    },
    "Type": {
      "description": "An action to type in text.\n",
      "properties": {
        "text": {
          "description": "The text to type.\n",
          "type": "string"
        },
        "type": {
          "default": "type",
          "description": "Specifies the event type. For a type action, this property is \nalways set to `type`.\n",
          "enum": [
            "type"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "text"
      ],
      "title": "Type",
      "type": "object"
    },
    "Wait": {
      "description": "A wait action.\n",
      "properties": {
        "type": {
          "default": "wait",
          "description": "Specifies the event type. For a wait action, this property is \nalways set to `wait`.\n",
          "enum": [
            "wait"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "title": "Wait",
      "type": "object"
    },
    "Annotation": {
      "anyOf": [
        {
          "$ref": "#/definitions/FileCitationBody"
        },
        {
          "$ref": "#/definitions/UrlCitationBody"
        },
        {
          "$ref": "#/definitions/ContainerFileCitationBody"
        },
        {
          "$ref": "#/definitions/FilePath"
        }
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "LogProb": {
      "description": "The log probability of a token.",
      "properties": {
        "bytes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "logprob": {
          "type": "number"
        },
        "token": {
          "type": "string"
        },
        "top_logprobs": {
          "items": {
            "$ref": "#/definitions/TopLogProb"
          },
          "type": "array"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes",
        "top_logprobs"
      ],
      "title": "Log probability",
      "type": "object"
    },
    "ImageDetail": {
      "enum": [
        "low",
        "high",
        "auto"
      ],
      "type": "string"
    },
    "ComparisonFilter": {
      "additionalProperties": false,
      "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
      "properties": {
        "key": {
          "description": "The key to compare against the value.",
          "type": "string"
        },
        "type": {
          "default": "eq",
          "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n",
          "enum": [
            "eq",
            "ne",
            "gt",
            "gte",
            "lt",
            "lte"
          ],
          "type": "string"
        },
        "value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            }
          ],
          "description": "The value to compare against the attribute key; supports string, number, or boolean types."
        }
      },
      "required": [
        "type",
        "key",
        "value"
      ],
      "title": "Comparison Filter",
      "type": "object",
      "x-oaiMeta": {
        "name": "ComparisonFilter"
      }
    },
    "CompoundFilter": {
      "$recursiveAnchor": true,
      "additionalProperties": false,
      "description": "Combine multiple filters using `and` or `or`.",
      "properties": {
        "filters": {
          "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ComparisonFilter"
              },
              {
                "$recursiveRef": "#"
              }
            ]
          },
          "type": "array"
        },
        "type": {
          "description": "Type of operation: `and` or `or`.",
          "enum": [
            "and",
            "or"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "filters"
      ],
      "title": "Compound Filter",
      "type": "object",
      "x-oaiMeta": {
        "name": "CompoundFilter"
      }
    },
    "RankerVersionType": {
      "enum": [
        "auto",
        "default-2024-11-15"
      ],
      "type": "string"
    },
    "InputAudio": {
      "description": "An audio input to the model.\n",
      "properties": {
        "input_audio": {
          "properties": {
            "data": {
              "description": "Base64-encoded audio data.\n",
              "type": "string"
            },
            "format": {
              "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
              "enum": [
                "mp3",
                "wav"
              ],
              "type": "string"
            }
          },
          "required": [
            "data",
            "format"
          ],
          "type": "object"
        },
        "type": {
          "description": "The type of the input item. Always `input_audio`.\n",
          "enum": [
            "input_audio"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "input_audio"
      ],
      "title": "Input audio",
      "type": "object"
    },
    "Coordinate": {
      "description": "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.\n",
      "properties": {
        "x": {
          "description": "The x-coordinate.\n",
          "type": "integer"
        },
        "y": {
          "description": "The y-coordinate.\n",
          "type": "integer"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "title": "Coordinate",
      "type": "object"
    },
    "FileCitationBody": {
      "description": "A citation to a file.",
      "properties": {
        "file_id": {
          "description": "The ID of the file.",
          "type": "string"
        },
        "filename": {
          "description": "The filename of the file cited.",
          "type": "string"
        },
        "index": {
          "description": "The index of the file in the list of files.",
          "type": "integer"
        },
        "type": {
          "default": "file_citation",
          "description": "The type of the file citation. Always `file_citation`.",
          "enum": [
            "file_citation"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "file_id",
        "index",
        "filename"
      ],
      "title": "File citation",
      "type": "object"
    },
    "UrlCitationBody": {
      "description": "A citation for a web resource used to generate a model response.",
      "properties": {
        "end_index": {
          "description": "The index of the last character of the URL citation in the message.",
          "type": "integer"
        },
        "start_index": {
          "description": "The index of the first character of the URL citation in the message.",
          "type": "integer"
        },
        "title": {
          "description": "The title of the web resource.",
          "type": "string"
        },
        "type": {
          "default": "url_citation",
          "description": "The type of the URL citation. Always `url_citation`.",
          "enum": [
            "url_citation"
          ],
          "type": "string",
          "x-stainless-const": true
        },
        "url": {
          "description": "The URL of the web resource.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "url",
        "start_index",
        "end_index",
        "title"
      ],
      "title": "URL citation",
      "type": "object"
    },
    "ContainerFileCitationBody": {
      "description": "A citation for a container file used to generate a model response.",
      "properties": {
        "container_id": {
          "description": "The ID of the container file.",
          "type": "string"
        },
        "end_index": {
          "description": "The index of the last character of the container file citation in the message.",
          "type": "integer"
        },
        "file_id": {
          "description": "The ID of the file.",
          "type": "string"
        },
        "filename": {
          "description": "The filename of the container file cited.",
          "type": "string"
        },
        "start_index": {
          "description": "The index of the first character of the container file citation in the message.",
          "type": "integer"
        },
        "type": {
          "default": "container_file_citation",
          "description": "The type of the container file citation. Always `container_file_citation`.",
          "enum": [
            "container_file_citation"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "container_id",
        "file_id",
        "start_index",
        "end_index",
        "filename"
      ],
      "title": "Container file citation",
      "type": "object"
    },
    "FilePath": {
      "description": "A path to a file.\n",
      "properties": {
        "file_id": {
          "description": "The ID of the file.\n",
          "type": "string"
        },
        "index": {
          "description": "The index of the file in the list of files.\n",
          "type": "integer"
        },
        "type": {
          "description": "The type of the file path. Always `file_path`.\n",
          "enum": [
            "file_path"
          ],
          "type": "string",
          "x-stainless-const": true
        }
      },
      "required": [
        "type",
        "file_id",
        "index"
      ],
      "title": "File path",
      "type": "object"
    },
    "TopLogProb": {
      "description": "The top log probability of a token.",
      "properties": {
        "bytes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "logprob": {
          "type": "number"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes"
      ],
      "title": "Top log probability",
      "type": "object"
    }
  }
}
