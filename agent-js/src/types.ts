import type { Message, Part, PartialModelResponse } from "@hoangvvo/llm-sdk";

export interface AgentRequest<TContext> {
  /**
   * The input messages to the agent.
   */
  messages: Message[];
  /**
   * The context to be used during tool calling and building system
   */
  context: TContext;
}

export interface AgentResponse {
  /**
   * The items generated during the agent's execution, such as new ToolMessage and AssistantMessage
   */
  items: RunItem[];

  /**
   * The output content generated by the agent.
   */
  content: Part[];
}

/**
 * Items generated during the run
 */
export type RunItem = RunItemMessage;

/**
 * A message generated from the run
 */
type RunItemMessage = { type: "message" } & Message;

export interface AgentStreamEventPartial extends PartialModelResponse {
  type: "partial";
}

export type AgentStreamEventMessage = {
  type: "message";
} & Message;

export interface AgentStreamEventResponse extends AgentResponse {
  type: "response";
}

export type AgentStreamEvent =
  | AgentStreamEventPartial
  | AgentStreamEventMessage
  | AgentStreamEventResponse;
