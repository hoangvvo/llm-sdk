import type {
  Message,
  ModelUsage,
  Part,
  PartialModelResponse,
} from "@hoangvvo/llm-sdk";

export interface AgentRequest<TContext> {
  /**
   * The input items to the agent, such as LLM messages.
   */
  input: AgentItem[];
  /**
   * The context to be used during tool calling and building system instructions
   */
  context: TContext;
}

export interface AgentResponse {
  /**
   * The items generated during the agent's execution, such as new ToolMessage and AssistantMessage
   */
  output: AgentItem[];

  /**
   * The final output content generated by the agent.
   */
  content: Part[];

  /**
   * Model calls information, including usage and cost
   */
  model_calls: ModelCallInfo[];
}

/**
 * An input for or output entry generated by the agent run
 */
export type AgentItem = AgentItemMessage;

/**
 * A LLM message used in the run
 */
export type AgentItemMessage = { type: "message" } & Message;

/**
 * Track a call to the LLM and record its usage and cost.
 */
export interface ModelCallInfo {
  usage: ModelUsage | null;
  cost: number | null;
  model_id: string;
  provider: string;
}

/**
 * Stream events emitted by the agent during runStream call.
 */
export type AgentStreamEvent =
  | AgentStreamEventPartial
  | AgentStreamEventMessage
  | AgentStreamEventResponse;

export interface AgentStreamEventPartial extends PartialModelResponse {
  type: "partial";
}

export type AgentStreamEventMessage = {
  type: "message";
} & Message;

export interface AgentStreamEventResponse extends AgentResponse {
  type: "response";
}
