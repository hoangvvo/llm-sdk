import type { Message, Part, PartialModelResponse } from "@hoangvvo/llm-sdk";

export interface AgentRequest<TContext> {
  /**
   * The input items to the agent, such as LLM messages.
   */
  input: AgentItem[];
  /**
   * The context to be used during tool calling and building system
   */
  context: TContext;
}

export interface AgentResponse {
  /**
   * The items generated during the agent's execution, such as new ToolMessage and AssistantMessage
   */
  output: AgentItem[];

  /**
   * The final output content generated by the agent.
   */
  content: Part[];
}

/**
 * Extracts all text content from the final content, separated by a space.
 */
export function getTextFromResponse(response: AgentResponse): string {
  return response.content
    .map((part) => (part.type === "text" ? part.text : undefined))
    .filter((text) => !!text)
    .join(" ");
}

/**
 * An input for or output entry generated by the agent run
 */
export type AgentItem = AgentItemMessage;

/**
 * A LLM message used in the run
 */
type AgentItemMessage = { type: "message" } & Message;

export interface AgentStreamEventPartial extends PartialModelResponse {
  type: "partial";
}

export type AgentStreamEventMessage = {
  type: "message";
} & Message;

export interface AgentStreamEventResponse extends AgentResponse {
  type: "response";
}

export type AgentStreamEvent =
  | AgentStreamEventPartial
  | AgentStreamEventMessage
  | AgentStreamEventResponse;
