import type {
  Message,
  ModelResponse,
  Part,
  PartialModelResponse,
} from "@hoangvvo/llm-sdk";

export interface AgentRequest<TContext> {
  /**
   * The input items to the agent, such as LLM messages.
   */
  input: AgentItem[];
  /**
   * The context to be used during tool calling and building system instructions
   */
  context: TContext;
}

export interface AgentResponse {
  /**
   * The items generated during the agent's execution, such as new ToolMessage and AssistantMessage
   */
  output: AgentItem[];

  /**
   * The final output content generated by the agent.
   */
  content: Part[];
}

/**
 * An input for or output entry generated by the agent run
 */
export type AgentItem =
  | AgentItemMessage
  | AgentItemModelResponse
  | AgentItemTool;

/**
 * A LLM message used in the run
 */
export type AgentItemMessage = { type: "message" } & Message;

/**
 * A model response generated in the run
 */
export interface AgentItemModelResponse extends ModelResponse {
  type: "model";
}

/**
 * A collection of tool call and result generated by the agent during a turn
 */
export interface AgentItemTool {
  type: "tool";
  /**
   * A unique ID for the tool call
   */
  tool_call_id: string;
  /**
   * The name of the tool called
   */
  tool_name: string;
  /**
   * The input provided to the tool
   */
  input: Record<string, unknown>;
  /**
   * The result of the tool call
   */
  output: Part[];
  /**
   * Whether the tool call resulted in an error
   */
  is_error: boolean;
}

/**
 * Stream events emitted by the agent during runStream call.
 */
export type AgentStreamEvent =
  | AgentStreamEventPartial
  | AgentStreamItemEvent
  | AgentStreamResponseEvent;

export interface AgentStreamEventPartial extends PartialModelResponse {
  event: "partial";
}

export interface AgentStreamItemEvent {
  event: "item";
  index: number;
  item: AgentItem;
}

export interface AgentStreamResponseEvent extends AgentResponse {
  event: "response";
}
