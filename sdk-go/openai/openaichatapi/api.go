package openaichatapi

import (
	"encoding/json"
	"errors"
	"fmt"
)

// CreateChatCompletionRequest represents the request for creating a chat completion
type CreateChatCompletionRequest struct {
	CreateModelResponseProperties
	// Parameters for audio output. Required when audio output is requested with
	// `modalities: ["audio"]`. [Learn more](https://platform.openai.com/docs/guides/audio).
	Audio *struct {
		// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
		// `opus`, or `pcm16`.
		Format string `json:"format"`
		// The voice the model uses to respond. Supported voices are
		// `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `nova`, `onyx`, `sage`, and `shimmer`.
		Voice VoiceIdsShared `json:"voice"`
	} `json:"audio,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on
	// their existing frequency in the text so far, decreasing the model's
	// likelihood to repeat the same line verbatim.
	FrequencyPenalty *float64 `json:"frequency_penalty,omitempty"`
	// Deprecated in favor of `tool_choice`.
	//
	// Controls which (if any) function is called by the model.
	//
	// `none` means the model will not call a function and instead generates a
	// message.
	//
	// `auto` means the model can pick between generating a message or calling a
	// function.
	//
	// Specifying a particular function via `{"name": "my_function"}` forces the
	// model to call that function.
	//
	// `none` is the default when no functions are present. `auto` is the default
	// if functions are present.
	FunctionCall interface{} `json:"function_call,omitempty"` // string or ChatCompletionFunctionCallOption
	// Deprecated in favor of `tools`.
	//
	// A list of functions the model may generate JSON inputs for.
	Functions []ChatCompletionFunctions `json:"functions,omitempty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the
	// tokenizer) to an associated bias value from -100 to 100. Mathematically,
	// the bias is added to the logits generated by the model prior to sampling.
	// The exact effect will vary per model, but values between -1 and 1 should
	// decrease or increase likelihood of selection; values like -100 or 100
	// should result in a ban or exclusive selection of the relevant token.
	LogitBias map[string]int `json:"logit_bias,omitempty"`
	// Whether to return log probabilities of the output tokens or not. If true,
	// returns the log probabilities of each output token returned in the
	// `content` of `message`.
	Logprobs *bool `json:"logprobs,omitempty"`
	// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
	MaxCompletionTokens *int `json:"max_completion_tokens,omitempty"`
	// The maximum number of [tokens](/tokenizer) that can be generated in the
	// chat completion. This value can be used to control
	// [costs](https://openai.com/api/pricing/) for text generated via API.
	//
	// This value is now deprecated in favor of `max_completion_tokens`, and is
	// not compatible with [o-series models](https://platform.openai.com/docs/guides/reasoning).
	MaxTokens *int `json:"max_tokens,omitempty"`
	// A list of messages comprising the conversation so far. Depending on the
	// [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are
	// supported, like [text](https://platform.openai.com/docs/guides/text-generation),
	// [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio).
	Messages   []ChatCompletionRequestMessage `json:"messages"`
	Modalities ResponseModalities             `json:"modalities,omitempty"`
	// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
	// offers a wide range of models with different capabilities, performance
	// characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)
	// to browse and compare available models.
	Model ModelIdsShared `json:"model"`
	// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
	N                 *int               `json:"n,omitempty"`
	ParallelToolCalls *ParallelToolCalls `json:"parallel_tool_calls,omitempty"`
	// Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),
	// which can greatly improve response times when large parts of the model
	// response are known ahead of time. This is most common when you are
	// regenerating a file with only minor changes to most of the content.
	Prediction *PredictionContent `json:"prediction,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on
	// whether they appear in the text so far, increasing the model's likelihood
	// to talk about new topics.
	PresencePenalty *float64         `json:"presence_penalty,omitempty"`
	ReasoningEffort *ReasoningEffort `json:"reasoning_effort,omitempty"`
	// An object specifying the format that the model must output.
	//
	// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
	// Structured Outputs which ensures the model will match your supplied JSON
	// schema. Learn more in the [Structured Outputs
	// guide](https://platform.openai.com/docs/guides/structured-outputs).
	//
	// Setting to `{ "type": "json_object" }` enables the older JSON mode, which
	// ensures the message the model generates is valid JSON. Using `json_schema`
	// is preferred for models that support it.
	ResponseFormat interface{} `json:"response_format,omitempty"` // ResponseFormatText, ResponseFormatJsonSchema, or ResponseFormatJsonObject
	// This feature is in Beta.
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	Seed *int64            `json:"seed,omitempty"`
	Stop StopConfiguration `json:"stop,omitempty"`
	// Whether or not to store the output of this chat completion request for
	// use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or
	// [evals](https://platform.openai.com/docs/guides/evals) products.
	//
	// Supports text and image inputs. Note: image inputs over 8MB will be dropped.
	Store *bool `json:"store,omitempty"`
	// If set to true, the model response data will be streamed to the client
	// as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
	// See the [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)
	// for more information, along with the [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)
	// guide for more information on how to handle the streaming events.
	Stream        *bool                          `json:"stream,omitempty"`
	StreamOptions *ChatCompletionStreamOptions   `json:"stream_options,omitempty"`
	ToolChoice    ChatCompletionToolChoiceOption `json:"tool_choice,omitempty"`
	// A list of tools the model may call. You can provide either
	// [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools) or
	// [function tools](https://platform.openai.com/docs/guides/function-calling).
	Tools []interface{} `json:"tools,omitempty"` // ChatCompletionTool or CustomToolChatCompletions
	// An integer between 0 and 20 specifying the number of most likely tokens to
	// return at each token position, each with an associated log probability.
	// `logprobs` must be set to `true` if this parameter is used.
	TopLogprobs *int       `json:"top_logprobs,omitempty"`
	Verbosity   *Verbosity `json:"verbosity,omitempty"`
	// This tool searches the web for relevant results to use in a response.
	// Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
	WebSearchOptions *struct {
		SearchContextSize *WebSearchContextSize `json:"search_context_size,omitempty"`
		// Approximate location parameters for the search.
		UserLocation *struct {
			Approximate WebSearchLocation `json:"approximate"`
			// The type of location approximation. Always `approximate`.
			Type string `json:"type"`
		} `json:"user_location,omitempty"`
	} `json:"web_search_options,omitempty"`
}

// Represents a chat completion response returned by model, based on the provided input.
type CreateChatCompletionResponse struct {
	// A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
		FinishReason string `json:"finish_reason"`
		// The index of the choice in the list of choices.
		Index int `json:"index"`
		// Log probability information for the choice.
		Logprobs *struct {
			// A list of message content tokens with log probability information.
			Content []ChatCompletionTokenLogprob `json:"content"`
			// A list of message refusal tokens with log probability information.
			Refusal []ChatCompletionTokenLogprob `json:"refusal"`
		} `json:"logprobs"`
		Message ChatCompletionResponseMessage `json:"message"`
	} `json:"choices"`
	// The Unix timestamp (in seconds) of when the chat completion was created.
	Created int64 `json:"created"`
	// A unique identifier for the chat completion.
	ID string `json:"id"`
	// The model used for the chat completion.
	Model string `json:"model"`
	// The object type, which is always `chat.completion`.
	Object      string       `json:"object"`
	ServiceTier *ServiceTier `json:"service_tier,omitempty"`
	// This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string          `json:"system_fingerprint,omitempty"`
	Usage             *CompletionUsage `json:"usage,omitempty"`
}

// Represents a streamed chunk of a chat completion response returned
// by the model, based on the provided input.
// [Learn more](https://platform.openai.com/docs/guides/streaming-responses).
type CreateChatCompletionStreamResponse struct {
	// A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
	// last chunk if you set `stream_options: {"include_usage": true}`.
	Choices []struct {
		Delta ChatCompletionStreamResponseDelta `json:"delta"`
		// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
		FinishReason *string `json:"finish_reason"`
		// The index of the choice in the list of choices.
		Index int `json:"index"`
		// Log probability information for the choice.
		Logprobs *struct {
			// A list of message content tokens with log probability information.
			Content []ChatCompletionTokenLogprob `json:"content"`
			// A list of message refusal tokens with log probability information.
			Refusal []ChatCompletionTokenLogprob `json:"refusal"`
		} `json:"logprobs,omitempty"`
	} `json:"choices"`
	// The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
	Created int64 `json:"created"`
	// A unique identifier for the chat completion. Each chunk has the same ID.
	ID string `json:"id"`
	// The model to generate the completion.
	Model string `json:"model"`
	// The object type, which is always `chat.completion.chunk`.
	Object      string       `json:"object"`
	ServiceTier *ServiceTier `json:"service_tier,omitempty"`
	// This fingerprint represents the backend configuration that the model runs with.
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`
	// An optional field that will only be present when you set
	// `stream_options: {"include_usage": true}` in your request. When present, it
	// contains a null value **except for the last chunk** which contains the
	// token usage statistics for the entire request.
	//
	// **NOTE:** If the stream is interrupted or cancelled, you may not
	// receive the final usage chunk which contains the total token usage for
	// the request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

type CreateModelResponseProperties struct {
	ModelResponseProperties
	// An integer between 0 and 20 specifying the number of most likely tokens to
	// return at each token position, each with an associated log probability.
	TopLogprobs *int `json:"top_logprobs,omitempty"`
}

type VoiceIdsShared string

const (
	VoiceAlloy   VoiceIdsShared = "alloy"
	VoiceAsh     VoiceIdsShared = "ash"
	VoiceBallad  VoiceIdsShared = "ballad"
	VoiceCoral   VoiceIdsShared = "coral"
	VoiceEcho    VoiceIdsShared = "echo"
	VoiceSage    VoiceIdsShared = "sage"
	VoiceShimmer VoiceIdsShared = "shimmer"
	VoiceVerse   VoiceIdsShared = "verse"
	VoiceMarin   VoiceIdsShared = "marin"
	VoiceCedar   VoiceIdsShared = "cedar"
)

// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
type ChatCompletionFunctionCallOption struct {
	// The name of the function to call.
	Name string `json:"name"`
}

type ChatCompletionFunctions struct {
	// A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name       string              `json:"name"`
	Parameters *FunctionParameters `json:"parameters,omitempty"`
}

type ChatCompletionRequestMessage struct {
	Developer *ChatCompletionRequestDeveloperMessage
	System    *ChatCompletionRequestSystemMessage
	User      *ChatCompletionRequestUserMessage
	Assistant *ChatCompletionRequestAssistantMessage
	Tool      *ChatCompletionRequestToolMessage
	Function  *ChatCompletionRequestFunctionMessage
}

func (m *ChatCompletionRequestMessage) MarshalJSON() ([]byte, error) {
	if m.Developer != nil {
		return json.Marshal(m.Developer)
	}
	if m.System != nil {
		return json.Marshal(m.System)
	}
	if m.User != nil {
		return json.Marshal(m.User)
	}
	if m.Assistant != nil {
		return json.Marshal(m.Assistant)
	}
	if m.Tool != nil {
		return json.Marshal(m.Tool)
	}
	if m.Function != nil {
		return json.Marshal(m.Function)
	}
	return nil, errors.New("ChatCompletionRequestMessage must have one variant set")
}

func (m *ChatCompletionRequestMessage) UnmarshalJSON(data []byte) error {
	var aux struct {
		Role string `json:"role"`
	}
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}
	switch aux.Role {
	case "developer":
		var dev ChatCompletionRequestDeveloperMessage
		if err := json.Unmarshal(data, &dev); err != nil {
			return err
		}
		m.Developer = &dev
	case "system":
		var sys ChatCompletionRequestSystemMessage
		if err := json.Unmarshal(data, &sys); err != nil {
			return err
		}
		m.System = &sys
	case "user":
		var usr ChatCompletionRequestUserMessage
		if err := json.Unmarshal(data, &usr); err != nil {
			return err
		}
		m.User = &usr
	case "assistant":
		var asst ChatCompletionRequestAssistantMessage
		if err := json.Unmarshal(data, &asst); err != nil {
			return err
		}
		m.Assistant = &asst
	case "tool":
		var tool ChatCompletionRequestToolMessage
		if err := json.Unmarshal(data, &tool); err != nil {
			return err
		}
		m.Tool = &tool
	case "function":
		var fn ChatCompletionRequestFunctionMessage
		if err := json.Unmarshal(data, &fn); err != nil {
			return err
		}
		m.Function = &fn
	default:
		return fmt.Errorf("unknown role: %s", aux.Role)
	}
	return nil
}

// Output types that you would like the model to generate.
// Most models are capable of generating text, which is the default:
//
// `["text"]`
//
// The `gpt-4o-audio-preview` model can also be used to
// [generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate
// both text and audio responses, you can use:
//
// `["text", "audio"]`
type ResponseModalities []string

type ModelIdsShared string

// Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
type ParallelToolCalls bool

// Static predicted output content, such as the content of a text file that is
// being regenerated.
type PredictionContent struct {
	// The type of the predicted content you want to provide. This type is
	// currently always `content`.
	Type string `json:"type"`
	// The content that should be matched when generating a model response.
	// If generated tokens would match this content, the entire model response
	// can be returned much more quickly.
	Content interface{} `json:"content"` // string or array of ChatCompletionRequestMessageContentPartText
}

// Constrains effort on reasoning for
// [reasoning models](https://platform.openai.com/docs/guides/reasoning).
// Currently supported values are `minimal`, `low`, `medium`, and `high`. Reducing
// reasoning effort can result in faster responses and fewer tokens used
// on reasoning in a response.
type ReasoningEffort string

const (
	ReasoningEffortMinimal ReasoningEffort = "minimal"
	ReasoningEffortLow     ReasoningEffort = "low"
	ReasoningEffortMedium  ReasoningEffort = "medium"
	ReasoningEffortHigh    ReasoningEffort = "high"
)

// Default response format. Used to generate text responses.
type ResponseFormatText struct {
	// The type of response format being defined. Always `text`.
	Type string `json:"type"`
}

// JSON Schema response format. Used to generate structured JSON responses.
// Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).
type ResponseFormatJsonSchema struct {
	// The type of response format being defined. Always `json_schema`.
	Type string `json:"type"`
	// Structured Outputs configuration options, including a JSON Schema.
	JsonSchema struct {
		// A description of what the response format is for, used by the model to
		// determine how to respond in the format.
		Description *string `json:"description,omitempty"`
		// The name of the response format. Must be a-z, A-Z, 0-9, or contain
		// underscores and dashes, with a maximum length of 64.
		Name   string                          `json:"name"`
		Schema *ResponseFormatJsonSchemaSchema `json:"schema,omitempty"`
		// Whether to enable strict schema adherence when generating the output.
		// If set to true, the model will always follow the exact schema defined
		// in the `schema` field. Only a subset of JSON Schema is supported when
		// `strict` is `true`. To learn more, read the [Structured Outputs
		// guide](https://platform.openai.com/docs/guides/structured-outputs).
		Strict *bool `json:"strict,omitempty"`
	} `json:"json_schema"`
}

// JSON object response format. An older method of generating JSON responses.
// Using `json_schema` is recommended for models that support it. Note that the
// model will not generate JSON without a system or user message instructing it
// to do so.
type ResponseFormatJsonObject struct {
	// The type of response format being defined. Always `json_object`.
	Type string `json:"type"`
}

// Not supported with latest reasoning models `o3` and `o4-mini`.
//
// Up to 4 sequences where the API will stop generating further tokens. The
// returned text will not contain the stop sequence.
type StopConfiguration interface{}

// Options for streaming response. Only set this when you set `stream: true`.
type ChatCompletionStreamOptions struct {
	// When true, stream obfuscation will be enabled. Stream obfuscation adds
	// random characters to an `obfuscation` field on streaming delta events to
	// normalize payload sizes as a mitigation to certain side-channel attacks.
	// These obfuscation fields are included by default, but add a small amount
	// of overhead to the data stream. You can set `include_obfuscation` to
	// false to optimize for bandwidth if you trust the network links between
	// your application and the OpenAI API.
	IncludeObfuscation *bool `json:"include_obfuscation,omitempty"`
	// If set, an additional chunk will be streamed before the `data: [DONE]`
	// message. The `usage` field on this chunk shows the token usage statistics
	// for the entire request, and the `choices` field will always be an empty
	// array.
	//
	// All other chunks will also include a `usage` field, but with a null
	// value. **NOTE:** If the stream is interrupted, you may not receive the
	// final usage chunk which contains the total token usage for the request.
	IncludeUsage *bool `json:"include_usage,omitempty"`
}

// Controls which (if any) tool is called by the model.
// `none` means the model will not call any tool and instead generates a message.
// `auto` means the model can pick between generating a message or calling one or more tools.
// `required` means the model must call one or more tools.
// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
//
// `none` is the default when no tools are present. `auto` is the default if tools are present.
type ChatCompletionToolChoiceOption interface{}

// A function tool that can be used to generate a response.
type ChatCompletionTool struct {
	// The type of the tool. Currently, only `function` is supported.
	Type     string         `json:"type"`
	Function FunctionObject `json:"function"`
}

// A custom tool that processes input using a specified format.
type CustomToolChatCompletions struct {
	// The type of the custom tool. Always `custom`.
	Type string `json:"type"`
	// Properties of the custom tool.
	Custom struct {
		// Optional description of the custom tool, used to provide more context.
		Description *string `json:"description,omitempty"`
		// The input format for the custom tool. Default is unconstrained text.
		Format interface{} `json:"format,omitempty"` // text or grammar format
		// The name of the custom tool, used to identify it in tool calls.
		Name string `json:"name"`
	} `json:"custom"`
}

// Constrains the verbosity of the model's response. Lower values will result in
// more concise responses, while higher values will result in more verbose responses.
// Currently supported values are `low`, `medium`, and `high`.
type Verbosity string

const (
	VerbosityLow    Verbosity = "low"
	VerbosityMedium Verbosity = "medium"
	VerbosityHigh   Verbosity = "high"
)

// High level guidance for the amount of context window space to use for the
// search. One of `low`, `medium`, or `high`. `medium` is the default.
type WebSearchContextSize string

const (
	WebSearchContextSizeLow    WebSearchContextSize = "low"
	WebSearchContextSizeMedium WebSearchContextSize = "medium"
	WebSearchContextSizeHigh   WebSearchContextSize = "high"
)

// Approximate location parameters for the search.
type WebSearchLocation struct {
	// Free text input for the city of the user, e.g. `San Francisco`.
	City *string `json:"city,omitempty"`
	// The two-letter
	// [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
	// e.g. `US`.
	Country *string `json:"country,omitempty"`
	// Free text input for the region of the user, e.g. `California`.
	Region *string `json:"region,omitempty"`
	// The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
	// of the user, e.g. `America/Los_Angeles`.
	Timezone *string `json:"timezone,omitempty"`
}

type ChatCompletionTokenLogprob struct {
	// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
	Bytes []int `json:"bytes"`
	// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
	Logprob float64 `json:"logprob"`
	// The token.
	Token string `json:"token"`
	// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
	TopLogprobs []struct {
		// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
		Bytes []int `json:"bytes"`
		// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
		Logprob float64 `json:"logprob"`
		// The token.
		Token string `json:"token"`
	} `json:"top_logprobs"`
}

// A chat completion message generated by the model.
type ChatCompletionResponseMessage struct {
	// Annotations for the message, when applicable, as when using the
	// [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
	Annotations []struct {
		// The type of the URL citation. Always `url_citation`.
		Type string `json:"type"`
		// A URL citation when using web search.
		UrlCitation struct {
			// The index of the last character of the URL citation in the message.
			EndIndex int `json:"end_index"`
			// The index of the first character of the URL citation in the message.
			StartIndex int `json:"start_index"`
			// The title of the web resource.
			Title string `json:"title"`
			// The URL of the web resource.
			Url string `json:"url"`
		} `json:"url_citation"`
	} `json:"annotations,omitempty"`
	// If the audio output modality is requested, this object contains data
	// about the audio response from the model. [Learn more](https://platform.openai.com/docs/guides/audio).
	Audio *struct {
		// Base64 encoded audio bytes generated by the model, in the format
		// specified in the request.
		Data string `json:"data"`
		// The Unix timestamp (in seconds) for when this audio response will
		// no longer be accessible on the server for use in multi-turn
		// conversations.
		ExpiresAt int64 `json:"expires_at"`
		// Unique identifier for this audio response.
		ID string `json:"id"`
		// Transcript of the audio generated by the model.
		Transcript string `json:"transcript"`
	} `json:"audio,omitempty"`
	// The contents of the message.
	Content *string `json:"content"`
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *struct {
		// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`
		// The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`
	// The refusal message generated by the model.
	Refusal *string `json:"refusal"`
	// The role of the author of this message.
	Role      string                         `json:"role"`
	ToolCalls ChatCompletionMessageToolCalls `json:"tool_calls,omitempty"`
}

// Specifies the processing type used for serving the request.
//   - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.
//   - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.
//   - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or '[priority](https://openai.com/api-priority-processing/)', then the request will be processed with the corresponding service tier.
//   - When not set, the default behavior is 'auto'.
//
// When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.
type ServiceTier string

const (
	ServiceTierAuto     ServiceTier = "auto"
	ServiceTierDefault  ServiceTier = "default"
	ServiceTierFlex     ServiceTier = "flex"
	ServiceTierScale    ServiceTier = "scale"
	ServiceTierPriority ServiceTier = "priority"
)

// Usage statistics for the completion request.
type CompletionUsage struct {
	// Number of tokens in the generated completion.
	CompletionTokens int `json:"completion_tokens"`
	// Breakdown of tokens used in a completion.
	CompletionTokensDetails *struct {
		// When using Predicted Outputs, the number of tokens in the
		// prediction that appeared in the completion.
		AcceptedPredictionTokens int  `json:"accepted_prediction_tokens"`
		TextTokens               *int `json:"text_tokens,omitempty"`
		// Audio input tokens generated by the model.
		AudioTokens int `json:"audio_tokens"`
		// Tokens generated by the model for reasoning.
		ReasoningTokens int `json:"reasoning_tokens"`
		// When using Predicted Outputs, the number of tokens in the
		// prediction that did not appear in the completion. However, like
		// reasoning tokens, these tokens are still counted in the total
		// completion tokens for purposes of billing, output, and context window
		// limits.
		RejectedPredictionTokens int `json:"rejected_prediction_tokens"`
	} `json:"completion_tokens_details,omitempty"`
	// Number of tokens in the prompt.
	PromptTokens int `json:"prompt_tokens"`
	// Breakdown of tokens used in the prompt.
	PromptTokensDetails *struct {
		// Audio input tokens present in the prompt.
		AudioTokens int `json:"audio_tokens"`
		// Cached tokens present in the prompt.
		CachedTokens        int  `json:"cached_tokens"`
		TextTokens          *int `json:"text_tokens,omitempty"`
		ImageTokens         *int `json:"image_tokens,omitempty"`
		CachedTokensDetails *struct {
			TextTokens  *int `json:"text_tokens,omitempty"`
			AudioTokens *int `json:"audio_tokens,omitempty"`
		} `json:"cached_tokens_details,omitempty"`
	} `json:"prompt_tokens_details,omitempty"`
	// Total number of tokens used in the request (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// A chat completion delta generated by streamed model responses.
type ChatCompletionStreamResponseDelta struct {
	// The contents of the chunk message.
	Content *string `json:"content,omitempty"`
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *struct {
		// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments *string `json:"arguments,omitempty"`
		// The name of the function to call.
		Name *string `json:"name,omitempty"`
	} `json:"function_call,omitempty"`
	// The refusal message generated by the model.
	Refusal *string `json:"refusal,omitempty"`
	// The role of the author of this message.
	Role      *string                              `json:"role,omitempty"`
	ToolCalls []ChatCompletionMessageToolCallChunk `json:"tool_calls,omitempty"`
	Audio     *struct {
		ID         *string `json:"id,omitempty"`
		Data       *string `json:"data,omitempty"`
		Transcript *string `json:"transcript,omitempty"`
	} `json:"audio,omitempty"`
}

type ModelResponseProperties struct {
	Metadata *Metadata `json:"metadata,omitempty"`
	// Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the `user` field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching).
	PromptCacheKey *string `json:"prompt_cache_key,omitempty"`
	// A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
	// The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).
	SafetyIdentifier *string      `json:"safety_identifier,omitempty"`
	ServiceTier      *ServiceTier `json:"service_tier,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float64 `json:"temperature,omitempty"`
	// An integer between 0 and 20 specifying the number of most likely tokens to
	// return at each token position, each with an associated log probability.
	TopLogprobs *int `json:"top_logprobs,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling,
	// where the model considers the results of the tokens with top_p probability
	// mass. So 0.1 means only the tokens comprising the top 10% probability mass
	// are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float64 `json:"top_p,omitempty"`
	// This field is being replaced by `safety_identifier` and `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching optimizations.
	// A stable identifier for your end-users.
	// Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).
	User *string `json:"user,omitempty"`
}

// The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
//
// Omitting `parameters` defines a function with an empty parameter list.
type FunctionParameters map[string]interface{}

// Developer-provided instructions that the model should follow, regardless of
// messages sent by the user. With o1 models and newer, `developer` messages
// replace the previous `system` messages.
type ChatCompletionRequestDeveloperMessage struct {
	// The contents of the developer message.
	Content interface{} `json:"content"` // string or array of ChatCompletionRequestMessageContentPartText
	// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
	// The role of the messages author, in this case `developer`.
	Role string `json:"role"`
}

// Developer-provided instructions that the model should follow, regardless of
// messages sent by the user. With o1 models and newer, use `developer` messages
// for this purpose instead.
type ChatCompletionRequestSystemMessage struct {
	// The contents of the system message.
	Content interface{} `json:"content"` // string or array of ChatCompletionRequestSystemMessageContentPart
	// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
	// The role of the messages author, in this case `system`.
	Role string `json:"role"`
}

// Messages sent by an end user, containing prompts or additional context
// information.
type ChatCompletionRequestUserMessage struct {
	// The contents of the user message.
	Content interface{} `json:"content"` // string or array of ChatCompletionRequestUserMessageContentPart
	// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
	// The role of the messages author, in this case `user`.
	Role string `json:"role"`
}

// Messages sent by the model in response to user messages.
type ChatCompletionRequestAssistantMessage struct {
	// Data about a previous audio response from the model.
	// [Learn more](https://platform.openai.com/docs/guides/audio).
	Audio *struct {
		// Unique identifier for a previous audio response from the model.
		ID string `json:"id"`
	} `json:"audio,omitempty"`
	// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
	Content interface{} `json:"content,omitempty"` // string, array of ChatCompletionRequestAssistantMessageContentPart, or null
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *struct {
		// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`
		// The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`
	// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
	// The refusal message by the assistant.
	Refusal *string `json:"refusal,omitempty"`
	// The role of the messages author, in this case `assistant`.
	Role      string                         `json:"role"`
	ToolCalls ChatCompletionMessageToolCalls `json:"tool_calls,omitempty"`
}

type ChatCompletionRequestToolMessage struct {
	// The contents of the tool message.
	Content interface{} `json:"content"` // string or array of ChatCompletionRequestToolMessageContentPart
	// The role of the messages author, in this case `tool`.
	Role string `json:"role"`
	// Tool call that this message is responding to.
	ToolCallID string `json:"tool_call_id"`
}

type ChatCompletionRequestFunctionMessage struct {
	// The contents of the function message.
	Content *string `json:"content"`
	// The name of the function to call.
	Name string `json:"name"`
	// The role of the messages author, in this case `function`.
	Role string `json:"role"`
}

type ChatModel string

const (
	ChatModelGPT41                          ChatModel = "gpt-4.1"
	ChatModelGPT41Mini                      ChatModel = "gpt-4.1-mini"
	ChatModelGPT41Nano                      ChatModel = "gpt-4.1-nano"
	ChatModelGPT41_20250414                 ChatModel = "gpt-4.1-2025-04-14"
	ChatModelGPT41Mini20250414              ChatModel = "gpt-4.1-mini-2025-04-14"
	ChatModelGPT41Nano20250414              ChatModel = "gpt-4.1-nano-2025-04-14"
	ChatModelO4Mini                         ChatModel = "o4-mini"
	ChatModelO4Mini20250416                 ChatModel = "o4-mini-2025-04-16"
	ChatModelO3                             ChatModel = "o3"
	ChatModelO320250416                     ChatModel = "o3-2025-04-16"
	ChatModelO3Mini                         ChatModel = "o3-mini"
	ChatModelO3Mini20250131                 ChatModel = "o3-mini-2025-01-31"
	ChatModelO1                             ChatModel = "o1"
	ChatModelO120241217                     ChatModel = "o1-2024-12-17"
	ChatModelO1Preview                      ChatModel = "o1-preview"
	ChatModelO1Preview20240912              ChatModel = "o1-preview-2024-09-12"
	ChatModelO1Mini                         ChatModel = "o1-mini"
	ChatModelO1Mini20240912                 ChatModel = "o1-mini-2024-09-12"
	ChatModelGPT4o                          ChatModel = "gpt-4o"
	ChatModelGPT4o20241120                  ChatModel = "gpt-4o-2024-11-20"
	ChatModelGPT4o20240806                  ChatModel = "gpt-4o-2024-08-06"
	ChatModelGPT4o20240513                  ChatModel = "gpt-4o-2024-05-13"
	ChatModelGPT4oAudioPreview              ChatModel = "gpt-4o-audio-preview"
	ChatModelGPT4oAudioPreview20241001      ChatModel = "gpt-4o-audio-preview-2024-10-01"
	ChatModelGPT4oAudioPreview20241217      ChatModel = "gpt-4o-audio-preview-2024-12-17"
	ChatModelGPT4oAudioPreview20250603      ChatModel = "gpt-4o-audio-preview-2025-06-03"
	ChatModelGPT4oMiniAudioPreview          ChatModel = "gpt-4o-mini-audio-preview"
	ChatModelGPT4oMiniAudioPreview20241217  ChatModel = "gpt-4o-mini-audio-preview-2024-12-17"
	ChatModelGPT4oSearchPreview             ChatModel = "gpt-4o-search-preview"
	ChatModelGPT4oMiniSearchPreview         ChatModel = "gpt-4o-mini-search-preview"
	ChatModelGPT4oSearchPreview20250311     ChatModel = "gpt-4o-search-preview-2025-03-11"
	ChatModelGPT4oMiniSearchPreview20250311 ChatModel = "gpt-4o-mini-search-preview-2025-03-11"
	ChatModelChatGPT4oLatest                ChatModel = "chatgpt-4o-latest"
	ChatModelCodexMiniLatest                ChatModel = "codex-mini-latest"
	ChatModelGPT4oMini                      ChatModel = "gpt-4o-mini"
	ChatModelGPT4oMini20240718              ChatModel = "gpt-4o-mini-2024-07-18"
	ChatModelGPT4Turbo                      ChatModel = "gpt-4-turbo"
	ChatModelGPT4Turbo20240409              ChatModel = "gpt-4-turbo-2024-04-09"
	ChatModelGPT40125Preview                ChatModel = "gpt-4-0125-preview"
	ChatModelGPT4TurboPreview               ChatModel = "gpt-4-turbo-preview"
	ChatModelGPT41106Preview                ChatModel = "gpt-4-1106-preview"
	ChatModelGPT4VisionPreview              ChatModel = "gpt-4-vision-preview"
	ChatModelGPT4                           ChatModel = "gpt-4"
	ChatModelGPT40314                       ChatModel = "gpt-4-0314"
	ChatModelGPT40613                       ChatModel = "gpt-4-0613"
	ChatModelGPT432k                        ChatModel = "gpt-4-32k"
	ChatModelGPT432k0314                    ChatModel = "gpt-4-32k-0314"
	ChatModelGPT432k0613                    ChatModel = "gpt-4-32k-0613"
	ChatModelGPT35Turbo                     ChatModel = "gpt-3.5-turbo"
	ChatModelGPT35Turbo16k                  ChatModel = "gpt-3.5-turbo-16k"
	ChatModelGPT35Turbo0301                 ChatModel = "gpt-3.5-turbo-0301"
	ChatModelGPT35Turbo0613                 ChatModel = "gpt-3.5-turbo-0613"
	ChatModelGPT35Turbo1106                 ChatModel = "gpt-3.5-turbo-1106"
	ChatModelGPT35Turbo0125                 ChatModel = "gpt-3.5-turbo-0125"
	ChatModelGPT35Turbo16k0613              ChatModel = "gpt-3.5-turbo-16k-0613"
)

// Learn about [text inputs](https://platform.openai.com/docs/guides/text-generation).
type ChatCompletionRequestMessageContentPartText struct {
	// The type of the content part.
	Type string `json:"type"`
	// The text content.
	Text string `json:"text"`
}

// The schema for the response format, described as a JSON Schema object.
// Learn how to build JSON schemas [here](https://json-schema.org/).
type ResponseFormatJsonSchemaSchema map[string]interface{}

// Constrains the tools available to the model to a pre-defined set.
type ChatCompletionAllowedToolsChoice struct {
	// Allowed tool configuration type. Always `allowed_tools`.
	Type         string                     `json:"type"`
	AllowedTools ChatCompletionAllowedTools `json:"allowed_tools"`
}

// Specifies a tool the model should use. Use to force the model to call a specific function.
type ChatCompletionNamedToolChoice struct {
	// For function calling, the type is always `function`.
	Type     string `json:"type"`
	Function struct {
		// The name of the function to call.
		Name string `json:"name"`
	} `json:"function"`
}

// Specifies a tool the model should use. Use to force the model to call a specific custom tool.
type ChatCompletionNamedToolChoiceCustom struct {
	// For custom tool calling, the type is always `custom`.
	Type   string `json:"type"`
	Custom struct {
		// The name of the custom tool to call.
		Name string `json:"name"`
	} `json:"custom"`
}

type FunctionObject struct {
	// A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name       string              `json:"name"`
	Parameters *FunctionParameters `json:"parameters,omitempty"`
	// Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).
	Strict *bool `json:"strict,omitempty"`
}

// The tool calls generated by the model, such as function calls.
type ChatCompletionMessageToolCalls []interface{} // ChatCompletionMessageToolCall or ChatCompletionMessageCustomToolCall

type ChatCompletionMessageToolCallChunk struct {
	Function *struct {
		// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments *string `json:"arguments,omitempty"`
		// The name of the function to call.
		Name *string `json:"name,omitempty"`
	} `json:"function,omitempty"`
	// The ID of the tool call.
	ID    *string `json:"id,omitempty"`
	Index int     `json:"index"`
	// The type of the tool. Currently, only `function` is supported.
	Type *string `json:"type,omitempty"`
}

// Set of 16 key-value pairs that can be attached to an object. This can be
// useful for storing additional information about the object in a structured
// format, and querying for objects via API or the dashboard.
//
// Keys are strings with a maximum length of 64 characters. Values are strings
// with a maximum length of 512 characters.
type Metadata map[string]string

type ChatCompletionRequestSystemMessageContentPart interface{} // ChatCompletionRequestMessageContentPartText

type ChatCompletionRequestUserMessageContentPart struct {
	Text  *ChatCompletionRequestMessageContentPartText
	Image *ChatCompletionRequestMessageContentPartImage
	Audio *ChatCompletionRequestMessageContentPartAudio
	File  *ChatCompletionRequestMessageContentPartFile
}

func (c *ChatCompletionRequestUserMessageContentPart) MarshalJSON() ([]byte, error) {
	if c.Text != nil {
		return json.Marshal(c.Text)
	}
	if c.Image != nil {
		return json.Marshal(c.Image)
	}
	if c.Audio != nil {
		return json.Marshal(c.Audio)
	}
	if c.File != nil {
		return json.Marshal(c.File)
	}
	return nil, errors.New("ChatCompletionRequestUserMessageContentPart must have one variant set")
}

func (c *ChatCompletionRequestUserMessageContentPart) UnmarshalJSON(data []byte) error {
	var aux struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}
	switch aux.Type {
	case "text":
		var text ChatCompletionRequestMessageContentPartText
		if err := json.Unmarshal(data, &text); err != nil {
			return err
		}
		c.Text = &text
	case "image_url":
		var image ChatCompletionRequestMessageContentPartImage
		if err := json.Unmarshal(data, &image); err != nil {
			return err
		}
		c.Image = &image
	case "input_audio":
		var audio ChatCompletionRequestMessageContentPartAudio
		if err := json.Unmarshal(data, &audio); err != nil {
			return err
		}
		c.Audio = &audio
	case "file":
		var file ChatCompletionRequestMessageContentPartFile
		if err := json.Unmarshal(data, &file); err != nil {
			return err
		}
		c.File = &file
	default:
		return fmt.Errorf("unknown type: %s", aux.Type)
	}
	return nil
}

type ChatCompletionRequestAssistantMessageContentPart struct {
	Text    *ChatCompletionRequestMessageContentPartText
	Refusal *ChatCompletionRequestMessageContentPartRefusal
}

func (c *ChatCompletionRequestAssistantMessageContentPart) MarshalJSON() ([]byte, error) {
	if c.Text != nil {
		return json.Marshal(c.Text)
	}
	if c.Refusal != nil {
		return json.Marshal(c.Refusal)
	}
	return nil, errors.New("ChatCompletionRequestAssistantMessageContentPart must have one variant set")
}

func (c *ChatCompletionRequestAssistantMessageContentPart) UnmarshalJSON(data []byte) error {
	var aux struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}
	switch aux.Type {
	case "text":
		var text ChatCompletionRequestMessageContentPartText
		if err := json.Unmarshal(data, &text); err != nil {
			return err
		}
		c.Text = &text
	case "refusal":
		var refusal ChatCompletionRequestMessageContentPartRefusal
		if err := json.Unmarshal(data, &refusal); err != nil {
			return err
		}
		c.Refusal = &refusal
	default:
		return fmt.Errorf("unknown type: %s", aux.Type)
	}
	return nil
}

type ChatCompletionRequestToolMessageContentPart interface{} // ChatCompletionRequestMessageContentPartText

// Constrains the tools available to the model to a pre-defined set.
type ChatCompletionAllowedTools struct {
	// Constrains the tools available to the model to a pre-defined set.
	//
	// `auto` allows the model to pick from among the allowed tools and generate a
	// message.
	//
	// `required` requires the model to call one or more of the allowed tools.
	Mode string `json:"mode"`
	// A list of tool definitions that the model should be allowed to call.
	//
	// For the Chat Completions API, the list of tool definitions might look like:
	// ```json
	// [
	//   { "type": "function", "function": { "name": "get_weather" } },
	//   { "type": "function", "function": { "name": "get_time" } }
	// ]
	// ```
	Tools []map[string]interface{} `json:"tools"`
}

// A call to a function tool created by the model.
type ChatCompletionMessageToolCall struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of the tool. Currently, only `function` is supported.
	Type string `json:"type"`
	// The function that the model called.
	Function struct {
		// The name of the function to call.
		Name string `json:"name"`
		// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`
	} `json:"function"`
}

// A call to a custom tool created by the model.
type ChatCompletionMessageCustomToolCall struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of the tool. Always `custom`.
	Type string `json:"type"`
	// The custom tool that the model called.
	Custom struct {
		// The name of the custom tool to call.
		Name string `json:"name"`
		// The input for the custom tool call generated by the model.
		Input string `json:"input"`
	} `json:"custom"`
}

// Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
type ChatCompletionRequestMessageContentPartImage struct {
	// The type of the content part.
	Type     string `json:"type"`
	ImageUrl struct {
		// Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
		Detail *string `json:"detail,omitempty"`
		// Either a URL of the image or the base64 encoded image data.
		Url string `json:"url"`
	} `json:"image_url"`
}

// Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).
type ChatCompletionRequestMessageContentPartAudio struct {
	// The type of the content part. Always `input_audio`.
	Type       string `json:"type"`
	InputAudio struct {
		// Base64 encoded audio data.
		Data string `json:"data"`
		// The format of the encoded audio data. Currently supports "wav" and "mp3".
		Format string `json:"format"`
	} `json:"input_audio"`
}

// Learn about [file inputs](https://platform.openai.com/docs/guides/text) for text generation.
type ChatCompletionRequestMessageContentPartFile struct {
	// The type of the content part. Always `file`.
	Type string `json:"type"`
	File struct {
		// The base64 encoded file data, used when passing the file to the model
		// as a string.
		FileData *string `json:"file_data,omitempty"`
		// The ID of an uploaded file to use as input.
		FileID *string `json:"file_id,omitempty"`
		// The name of the file, used when passing the file to the model as a
		// string.
		Filename *string `json:"filename,omitempty"`
	} `json:"file"`
}

type ChatCompletionRequestMessageContentPartRefusal struct {
	// The type of the content part.
	Type string `json:"type"`
	// The refusal message generated by the model.
	Refusal string `json:"refusal"`
}
